<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>true</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>
module LVS

  def LVS.execute_lvs(_macro)

    _timer = RBA::Timer::new
    _timer.start
    _lvs = LVSEngine::new

    begin

      # Set a debugger scope so that our errors end up with the debugger set to the LVS's line
      RBA::MacroExecutionContext::set_debugger_scope(_macro.path)
      # No verbosity set in lvs engine - we cannot use the engine's logger 
      RBA::Logger::verbosity &gt;= 10 &amp;&amp; RBA::Logger::info("Running #{_macro.path}")
      _lvs.instance_eval(_macro.text, _macro.path)
      # Remove the debugger scope
      RBA::MacroExecutionContext::remove_debugger_scope

    rescue =&gt; ex

      _lvs.error("In #{_macro.path}: #{ex.to_s}")
      RBA::MacroExecutionContext::ignore_next_exception
      raise ex

    ensure

      # cleans up and creates layout views
      _lvs._finish

    end

    _timer.stop
    _lvs.info("Total run time: #{'%.3f'%(_timer.sys+_timer.user)}s")

  end
  
  # A DSL implementation for a LVS language (XML format)
  class LVSInterpreter &lt; RBA::MacroInterpreter
  
    # Constructor
    def initialize

      # Make the DSL use ruby syntax highlighting
      self.syntax_scheme = "ruby"
      self.suffix = "lylvs"
      self.debugger_scheme = RBA::MacroInterpreter::RubyDebugger
      self.storage_scheme = RBA::MacroInterpreter::MacroFormat
      self.description = "LVS"

      # Registers the new interpreter
      register("lvs-dsl-xml")

      # create a template for the macro editor:
      mt = create_template("lvs")
      mt.text = &lt;&lt;"END"
# Reference schematic (if not absolute: path relative to original layout)
schematic("schematic.cir")

# Enable hierarchical mode
deep

# Produce LVS report
report_lvs

# -------------------------------------------------------------------
# Layers

# Drawing layers
nwell       = input(1, 0)
active      = input(2, 0)
pplus       = input(3, 0)
nplus       = input(4, 0)
poly        = input(5, 0)
contact     = input(6, 0)
metal1      = input(7, 0)
metal1_lbl  = labels(7, 1)
via1        = input(8, 0)
metal2      = input(9, 0)
metal2_lbl  = labels(9, 1)

# Bulk layer for terminal provisioning
bulk        = polygon_layer

# Computed layers
active_in_nwell       = active &amp; nwell
pactive               = active_in_nwell &amp; pplus
pgate                 = pactive &amp; poly
psd                   = pactive - pgate
ntie                  = active_in_nwell &amp; nplus

active_outside_nwell  = active - nwell
nactive               = active_outside_nwell &amp; nplus
ngate                 = nactive &amp; poly
nsd                   = nactive - ngate
ptie                  = active_outside_nwell &amp; pplus

# -------------------------------------------------------------------
# Device extraction

# PMOS transistor device extraction
extract_devices(mos4("PMOS"), { "SD" => psd, "G" => pgate, "W" => nwell, 
                                "tS" => psd, "tD" => psd, "tG" => poly, "tW" => nwell })

# NMOS transistor device extraction
extract_devices(mos4("NMOS"), { "SD" => nsd, "G" => ngate, "W" => bulk, 
                                "tS" => nsd, "tD" => nsd, "tG" => poly, "tW" => bulk })

# -------------------------------------------------------------------
# Connectivity

# Inter-layer
connect(psd,        contact)
connect(nsd,        contact)
connect(poly,       contact)
connect(ntie,       contact)
connect(nwell,      ntie)
connect(ptie,       contact)
connect(contact,    metal1)
connect(metal1,     metal1_lbl)   # attaches labels
connect(metal1,     via1)
connect(via1,       metal2)
connect(metal2,     metal2_lbl)   # attaches labels

# Global
connect_global(bulk, "SUBSTRATE")
connect_global(ptie, "SUBSTRATE")

# -------------------------------------------------------------------
# Netlist and compare

# Netlist normalization
netlist.simplify

# Netlist vs. netlist
compare

END
      mt.show_in_menu = true
      mt.menu_path = "tools_menu.lvs.end"
      mt.group_name = "lvs_scripts"
      mt.description = "General;;LVS script (*.lylvs)\nA LVS script using KLayout's LVS language"
      mt.category = "lvs"

      # if available, create a menu branch
      if RBA::Application::instance &amp;&amp; RBA::Application::instance.main_window
        mw = RBA::Application::instance.main_window
        mw.menu.insert_menu("tools_menu.verification_group+", "lvs", "LVS")
      end

    end
    
    # Implements the execute method
    def execute(macro)
      LVS::execute_lvs(macro)
    end
    
  end
  
  # A DSL implementation for a LVS language (Plain text format)
  class LVSPlainTextInterpreter &lt; RBA::MacroInterpreter
  
    # Constructor
    def initialize

      # Make the DSL use ruby syntax highlighting
      self.syntax_scheme = "ruby"
      self.suffix = "lvs"
      self.debugger_scheme = RBA::MacroInterpreter::RubyDebugger
      self.storage_scheme = RBA::MacroInterpreter::PlainTextWithHashAnnotationsFormat
      self.description = "LVS (Text)"

      # Registers the new interpreter
      register("lvs-dsl")

    end
    
    # Implements the execute method
    def execute(macro)
      LVS::execute_lvs(macro)
    end
    
  end
  
  # Register the new interpreters
  LVSInterpreter::new
  LVSPlainTextInterpreter::new
 
end
</text>
</klayout-macro>

