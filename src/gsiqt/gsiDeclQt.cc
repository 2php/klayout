
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2016 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQt.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <Qt>
#include "gsiQt.h"
#include "gsiQtCommon.h"
#include "gsiDeclQtTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// namespace Qt

class Qt_Namespace { };

namespace gsi
{
gsi::Class<Qt_Namespace> decl_Qt_Namespace ("Qt",
  gsi::Methods(),
  "@qt\n@brief This class represents the Qt namespace");
}


//  Implementation of the enum wrapper class for Qt::AlignmentFlag
namespace qt_gsi
{

static gsi::Enum<Qt::AlignmentFlag> decl_Qt_AlignmentFlag_Enum ("Qt_AlignmentFlag",
    gsi::enum_const ("AlignLeft", Qt::AlignLeft, "@brief Enum constant Qt::AlignLeft") +
    gsi::enum_const ("AlignLeading", Qt::AlignLeading, "@brief Enum constant Qt::AlignLeading") +
    gsi::enum_const ("AlignRight", Qt::AlignRight, "@brief Enum constant Qt::AlignRight") +
    gsi::enum_const ("AlignTrailing", Qt::AlignTrailing, "@brief Enum constant Qt::AlignTrailing") +
    gsi::enum_const ("AlignHCenter", Qt::AlignHCenter, "@brief Enum constant Qt::AlignHCenter") +
    gsi::enum_const ("AlignJustify", Qt::AlignJustify, "@brief Enum constant Qt::AlignJustify") +
    gsi::enum_const ("AlignAbsolute", Qt::AlignAbsolute, "@brief Enum constant Qt::AlignAbsolute") +
    gsi::enum_const ("AlignHorizontal_Mask", Qt::AlignHorizontal_Mask, "@brief Enum constant Qt::AlignHorizontal_Mask") +
    gsi::enum_const ("AlignTop", Qt::AlignTop, "@brief Enum constant Qt::AlignTop") +
    gsi::enum_const ("AlignBottom", Qt::AlignBottom, "@brief Enum constant Qt::AlignBottom") +
    gsi::enum_const ("AlignVCenter", Qt::AlignVCenter, "@brief Enum constant Qt::AlignVCenter") +
    gsi::enum_const ("AlignVertical_Mask", Qt::AlignVertical_Mask, "@brief Enum constant Qt::AlignVertical_Mask") +
    gsi::enum_const ("AlignCenter", Qt::AlignCenter, "@brief Enum constant Qt::AlignCenter"),
  "@qt\n@brief This class represents the Qt::AlignmentFlag enum");

static gsi::QFlagsClass<Qt::AlignmentFlag > decl_Qt_AlignmentFlag_Enums ("Qt_QFlags_AlignmentFlag",
  "@qt\n@brief This class represents the QFlags<Qt::AlignmentFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_AlignmentFlag_Enum_in_parent (decl_Qt_AlignmentFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_AlignmentFlag_Enum_as_child (decl_Qt_AlignmentFlag_Enum, "AlignmentFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_AlignmentFlag_Enums_as_child (decl_Qt_AlignmentFlag_Enums, "QFlags_AlignmentFlag");

}


//  Implementation of the enum wrapper class for Qt::AnchorAttribute
namespace qt_gsi
{

static gsi::Enum<Qt::AnchorAttribute> decl_Qt_AnchorAttribute_Enum ("Qt_AnchorAttribute",
    gsi::enum_const ("AnchorName", Qt::AnchorName, "@brief Enum constant Qt::AnchorName") +
    gsi::enum_const ("AnchorHref", Qt::AnchorHref, "@brief Enum constant Qt::AnchorHref"),
  "@qt\n@brief This class represents the Qt::AnchorAttribute enum");

static gsi::QFlagsClass<Qt::AnchorAttribute > decl_Qt_AnchorAttribute_Enums ("Qt_QFlags_AnchorAttribute",
  "@qt\n@brief This class represents the QFlags<Qt::AnchorAttribute> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_AnchorAttribute_Enum_in_parent (decl_Qt_AnchorAttribute_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_AnchorAttribute_Enum_as_child (decl_Qt_AnchorAttribute_Enum, "AnchorAttribute");
static gsi::ClassExt<Qt_Namespace> decl_Qt_AnchorAttribute_Enums_as_child (decl_Qt_AnchorAttribute_Enums, "QFlags_AnchorAttribute");

}


//  Implementation of the enum wrapper class for Qt::AnchorPoint
namespace qt_gsi
{

static gsi::Enum<Qt::AnchorPoint> decl_Qt_AnchorPoint_Enum ("Qt_AnchorPoint",
    gsi::enum_const ("AnchorLeft", Qt::AnchorLeft, "@brief Enum constant Qt::AnchorLeft") +
    gsi::enum_const ("AnchorHorizontalCenter", Qt::AnchorHorizontalCenter, "@brief Enum constant Qt::AnchorHorizontalCenter") +
    gsi::enum_const ("AnchorRight", Qt::AnchorRight, "@brief Enum constant Qt::AnchorRight") +
    gsi::enum_const ("AnchorTop", Qt::AnchorTop, "@brief Enum constant Qt::AnchorTop") +
    gsi::enum_const ("AnchorVerticalCenter", Qt::AnchorVerticalCenter, "@brief Enum constant Qt::AnchorVerticalCenter") +
    gsi::enum_const ("AnchorBottom", Qt::AnchorBottom, "@brief Enum constant Qt::AnchorBottom"),
  "@qt\n@brief This class represents the Qt::AnchorPoint enum");

static gsi::QFlagsClass<Qt::AnchorPoint > decl_Qt_AnchorPoint_Enums ("Qt_QFlags_AnchorPoint",
  "@qt\n@brief This class represents the QFlags<Qt::AnchorPoint> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_AnchorPoint_Enum_in_parent (decl_Qt_AnchorPoint_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_AnchorPoint_Enum_as_child (decl_Qt_AnchorPoint_Enum, "AnchorPoint");
static gsi::ClassExt<Qt_Namespace> decl_Qt_AnchorPoint_Enums_as_child (decl_Qt_AnchorPoint_Enums, "QFlags_AnchorPoint");

}


//  Implementation of the enum wrapper class for Qt::ApplicationAttribute
namespace qt_gsi
{

static gsi::Enum<Qt::ApplicationAttribute> decl_Qt_ApplicationAttribute_Enum ("Qt_ApplicationAttribute",
    gsi::enum_const ("AA_ImmediateWidgetCreation", Qt::AA_ImmediateWidgetCreation, "@brief Enum constant Qt::AA_ImmediateWidgetCreation") +
    gsi::enum_const ("AA_MSWindowsUseDirect3DByDefault", Qt::AA_MSWindowsUseDirect3DByDefault, "@brief Enum constant Qt::AA_MSWindowsUseDirect3DByDefault") +
    gsi::enum_const ("AA_DontShowIconsInMenus", Qt::AA_DontShowIconsInMenus, "@brief Enum constant Qt::AA_DontShowIconsInMenus") +
    gsi::enum_const ("AA_NativeWindows", Qt::AA_NativeWindows, "@brief Enum constant Qt::AA_NativeWindows") +
    gsi::enum_const ("AA_DontCreateNativeWidgetSiblings", Qt::AA_DontCreateNativeWidgetSiblings, "@brief Enum constant Qt::AA_DontCreateNativeWidgetSiblings") +
    gsi::enum_const ("AA_MacPluginApplication", Qt::AA_MacPluginApplication, "@brief Enum constant Qt::AA_MacPluginApplication") +
    gsi::enum_const ("AA_DontUseNativeMenuBar", Qt::AA_DontUseNativeMenuBar, "@brief Enum constant Qt::AA_DontUseNativeMenuBar") +
    gsi::enum_const ("AA_MacDontSwapCtrlAndMeta", Qt::AA_MacDontSwapCtrlAndMeta, "@brief Enum constant Qt::AA_MacDontSwapCtrlAndMeta") +
    gsi::enum_const ("AA_S60DontConstructApplicationPanes", Qt::AA_S60DontConstructApplicationPanes, "@brief Enum constant Qt::AA_S60DontConstructApplicationPanes") +
    gsi::enum_const ("AA_AttributeCount", Qt::AA_AttributeCount, "@brief Enum constant Qt::AA_AttributeCount"),
  "@qt\n@brief This class represents the Qt::ApplicationAttribute enum");

static gsi::QFlagsClass<Qt::ApplicationAttribute > decl_Qt_ApplicationAttribute_Enums ("Qt_QFlags_ApplicationAttribute",
  "@qt\n@brief This class represents the QFlags<Qt::ApplicationAttribute> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ApplicationAttribute_Enum_in_parent (decl_Qt_ApplicationAttribute_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ApplicationAttribute_Enum_as_child (decl_Qt_ApplicationAttribute_Enum, "ApplicationAttribute");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ApplicationAttribute_Enums_as_child (decl_Qt_ApplicationAttribute_Enums, "QFlags_ApplicationAttribute");

}


//  Implementation of the enum wrapper class for Qt::ArrowType
namespace qt_gsi
{

static gsi::Enum<Qt::ArrowType> decl_Qt_ArrowType_Enum ("Qt_ArrowType",
    gsi::enum_const ("NoArrow", Qt::NoArrow, "@brief Enum constant Qt::NoArrow") +
    gsi::enum_const ("UpArrow", Qt::UpArrow, "@brief Enum constant Qt::UpArrow") +
    gsi::enum_const ("DownArrow", Qt::DownArrow, "@brief Enum constant Qt::DownArrow") +
    gsi::enum_const ("LeftArrow", Qt::LeftArrow, "@brief Enum constant Qt::LeftArrow") +
    gsi::enum_const ("RightArrow", Qt::RightArrow, "@brief Enum constant Qt::RightArrow"),
  "@qt\n@brief This class represents the Qt::ArrowType enum");

static gsi::QFlagsClass<Qt::ArrowType > decl_Qt_ArrowType_Enums ("Qt_QFlags_ArrowType",
  "@qt\n@brief This class represents the QFlags<Qt::ArrowType> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ArrowType_Enum_in_parent (decl_Qt_ArrowType_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ArrowType_Enum_as_child (decl_Qt_ArrowType_Enum, "ArrowType");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ArrowType_Enums_as_child (decl_Qt_ArrowType_Enums, "QFlags_ArrowType");

}


//  Implementation of the enum wrapper class for Qt::AspectRatioMode
namespace qt_gsi
{

static gsi::Enum<Qt::AspectRatioMode> decl_Qt_AspectRatioMode_Enum ("Qt_AspectRatioMode",
    gsi::enum_const ("IgnoreAspectRatio", Qt::IgnoreAspectRatio, "@brief Enum constant Qt::IgnoreAspectRatio") +
    gsi::enum_const ("KeepAspectRatio", Qt::KeepAspectRatio, "@brief Enum constant Qt::KeepAspectRatio") +
    gsi::enum_const ("KeepAspectRatioByExpanding", Qt::KeepAspectRatioByExpanding, "@brief Enum constant Qt::KeepAspectRatioByExpanding"),
  "@qt\n@brief This class represents the Qt::AspectRatioMode enum");

static gsi::QFlagsClass<Qt::AspectRatioMode > decl_Qt_AspectRatioMode_Enums ("Qt_QFlags_AspectRatioMode",
  "@qt\n@brief This class represents the QFlags<Qt::AspectRatioMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_AspectRatioMode_Enum_in_parent (decl_Qt_AspectRatioMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_AspectRatioMode_Enum_as_child (decl_Qt_AspectRatioMode_Enum, "AspectRatioMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_AspectRatioMode_Enums_as_child (decl_Qt_AspectRatioMode_Enums, "QFlags_AspectRatioMode");

}


//  Implementation of the enum wrapper class for Qt::Axis
namespace qt_gsi
{

static gsi::Enum<Qt::Axis> decl_Qt_Axis_Enum ("Qt_Axis",
    gsi::enum_const ("XAxis", Qt::XAxis, "@brief Enum constant Qt::XAxis") +
    gsi::enum_const ("YAxis", Qt::YAxis, "@brief Enum constant Qt::YAxis") +
    gsi::enum_const ("ZAxis", Qt::ZAxis, "@brief Enum constant Qt::ZAxis"),
  "@qt\n@brief This class represents the Qt::Axis enum");

static gsi::QFlagsClass<Qt::Axis > decl_Qt_Axis_Enums ("Qt_QFlags_Axis",
  "@qt\n@brief This class represents the QFlags<Qt::Axis> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_Axis_Enum_in_parent (decl_Qt_Axis_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_Axis_Enum_as_child (decl_Qt_Axis_Enum, "Axis");
static gsi::ClassExt<Qt_Namespace> decl_Qt_Axis_Enums_as_child (decl_Qt_Axis_Enums, "QFlags_Axis");

}


//  Implementation of the enum wrapper class for Qt::BGMode
namespace qt_gsi
{

static gsi::Enum<Qt::BGMode> decl_Qt_BGMode_Enum ("Qt_BGMode",
    gsi::enum_const ("TransparentMode", Qt::TransparentMode, "@brief Enum constant Qt::TransparentMode") +
    gsi::enum_const ("OpaqueMode", Qt::OpaqueMode, "@brief Enum constant Qt::OpaqueMode"),
  "@qt\n@brief This class represents the Qt::BGMode enum");

static gsi::QFlagsClass<Qt::BGMode > decl_Qt_BGMode_Enums ("Qt_QFlags_BGMode",
  "@qt\n@brief This class represents the QFlags<Qt::BGMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_BGMode_Enum_in_parent (decl_Qt_BGMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_BGMode_Enum_as_child (decl_Qt_BGMode_Enum, "BGMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_BGMode_Enums_as_child (decl_Qt_BGMode_Enums, "QFlags_BGMode");

}


//  Implementation of the enum wrapper class for Qt::BrushStyle
namespace qt_gsi
{

static gsi::Enum<Qt::BrushStyle> decl_Qt_BrushStyle_Enum ("Qt_BrushStyle",
    gsi::enum_const ("NoBrush", Qt::NoBrush, "@brief Enum constant Qt::NoBrush") +
    gsi::enum_const ("SolidPattern", Qt::SolidPattern, "@brief Enum constant Qt::SolidPattern") +
    gsi::enum_const ("Dense1Pattern", Qt::Dense1Pattern, "@brief Enum constant Qt::Dense1Pattern") +
    gsi::enum_const ("Dense2Pattern", Qt::Dense2Pattern, "@brief Enum constant Qt::Dense2Pattern") +
    gsi::enum_const ("Dense3Pattern", Qt::Dense3Pattern, "@brief Enum constant Qt::Dense3Pattern") +
    gsi::enum_const ("Dense4Pattern", Qt::Dense4Pattern, "@brief Enum constant Qt::Dense4Pattern") +
    gsi::enum_const ("Dense5Pattern", Qt::Dense5Pattern, "@brief Enum constant Qt::Dense5Pattern") +
    gsi::enum_const ("Dense6Pattern", Qt::Dense6Pattern, "@brief Enum constant Qt::Dense6Pattern") +
    gsi::enum_const ("Dense7Pattern", Qt::Dense7Pattern, "@brief Enum constant Qt::Dense7Pattern") +
    gsi::enum_const ("HorPattern", Qt::HorPattern, "@brief Enum constant Qt::HorPattern") +
    gsi::enum_const ("VerPattern", Qt::VerPattern, "@brief Enum constant Qt::VerPattern") +
    gsi::enum_const ("CrossPattern", Qt::CrossPattern, "@brief Enum constant Qt::CrossPattern") +
    gsi::enum_const ("BDiagPattern", Qt::BDiagPattern, "@brief Enum constant Qt::BDiagPattern") +
    gsi::enum_const ("FDiagPattern", Qt::FDiagPattern, "@brief Enum constant Qt::FDiagPattern") +
    gsi::enum_const ("DiagCrossPattern", Qt::DiagCrossPattern, "@brief Enum constant Qt::DiagCrossPattern") +
    gsi::enum_const ("LinearGradientPattern", Qt::LinearGradientPattern, "@brief Enum constant Qt::LinearGradientPattern") +
    gsi::enum_const ("RadialGradientPattern", Qt::RadialGradientPattern, "@brief Enum constant Qt::RadialGradientPattern") +
    gsi::enum_const ("ConicalGradientPattern", Qt::ConicalGradientPattern, "@brief Enum constant Qt::ConicalGradientPattern") +
    gsi::enum_const ("TexturePattern", Qt::TexturePattern, "@brief Enum constant Qt::TexturePattern"),
  "@qt\n@brief This class represents the Qt::BrushStyle enum");

static gsi::QFlagsClass<Qt::BrushStyle > decl_Qt_BrushStyle_Enums ("Qt_QFlags_BrushStyle",
  "@qt\n@brief This class represents the QFlags<Qt::BrushStyle> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_BrushStyle_Enum_in_parent (decl_Qt_BrushStyle_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_BrushStyle_Enum_as_child (decl_Qt_BrushStyle_Enum, "BrushStyle");
static gsi::ClassExt<Qt_Namespace> decl_Qt_BrushStyle_Enums_as_child (decl_Qt_BrushStyle_Enums, "QFlags_BrushStyle");

}


//  Implementation of the enum wrapper class for Qt::CaseSensitivity
namespace qt_gsi
{

static gsi::Enum<Qt::CaseSensitivity> decl_Qt_CaseSensitivity_Enum ("Qt_CaseSensitivity",
    gsi::enum_const ("CaseInsensitive", Qt::CaseInsensitive, "@brief Enum constant Qt::CaseInsensitive") +
    gsi::enum_const ("CaseSensitive", Qt::CaseSensitive, "@brief Enum constant Qt::CaseSensitive"),
  "@qt\n@brief This class represents the Qt::CaseSensitivity enum");

static gsi::QFlagsClass<Qt::CaseSensitivity > decl_Qt_CaseSensitivity_Enums ("Qt_QFlags_CaseSensitivity",
  "@qt\n@brief This class represents the QFlags<Qt::CaseSensitivity> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_CaseSensitivity_Enum_in_parent (decl_Qt_CaseSensitivity_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_CaseSensitivity_Enum_as_child (decl_Qt_CaseSensitivity_Enum, "CaseSensitivity");
static gsi::ClassExt<Qt_Namespace> decl_Qt_CaseSensitivity_Enums_as_child (decl_Qt_CaseSensitivity_Enums, "QFlags_CaseSensitivity");

}


//  Implementation of the enum wrapper class for Qt::CheckState
namespace qt_gsi
{

static gsi::Enum<Qt::CheckState> decl_Qt_CheckState_Enum ("Qt_CheckState",
    gsi::enum_const ("Unchecked", Qt::Unchecked, "@brief Enum constant Qt::Unchecked") +
    gsi::enum_const ("PartiallyChecked", Qt::PartiallyChecked, "@brief Enum constant Qt::PartiallyChecked") +
    gsi::enum_const ("Checked", Qt::Checked, "@brief Enum constant Qt::Checked"),
  "@qt\n@brief This class represents the Qt::CheckState enum");

static gsi::QFlagsClass<Qt::CheckState > decl_Qt_CheckState_Enums ("Qt_QFlags_CheckState",
  "@qt\n@brief This class represents the QFlags<Qt::CheckState> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_CheckState_Enum_in_parent (decl_Qt_CheckState_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_CheckState_Enum_as_child (decl_Qt_CheckState_Enum, "CheckState");
static gsi::ClassExt<Qt_Namespace> decl_Qt_CheckState_Enums_as_child (decl_Qt_CheckState_Enums, "QFlags_CheckState");

}


//  Implementation of the enum wrapper class for Qt::ClipOperation
namespace qt_gsi
{

static gsi::Enum<Qt::ClipOperation> decl_Qt_ClipOperation_Enum ("Qt_ClipOperation",
    gsi::enum_const ("NoClip", Qt::NoClip, "@brief Enum constant Qt::NoClip") +
    gsi::enum_const ("ReplaceClip", Qt::ReplaceClip, "@brief Enum constant Qt::ReplaceClip") +
    gsi::enum_const ("IntersectClip", Qt::IntersectClip, "@brief Enum constant Qt::IntersectClip") +
    gsi::enum_const ("UniteClip", Qt::UniteClip, "@brief Enum constant Qt::UniteClip"),
  "@qt\n@brief This class represents the Qt::ClipOperation enum");

static gsi::QFlagsClass<Qt::ClipOperation > decl_Qt_ClipOperation_Enums ("Qt_QFlags_ClipOperation",
  "@qt\n@brief This class represents the QFlags<Qt::ClipOperation> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ClipOperation_Enum_in_parent (decl_Qt_ClipOperation_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ClipOperation_Enum_as_child (decl_Qt_ClipOperation_Enum, "ClipOperation");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ClipOperation_Enums_as_child (decl_Qt_ClipOperation_Enums, "QFlags_ClipOperation");

}


//  Implementation of the enum wrapper class for Qt::ConnectionType
namespace qt_gsi
{

static gsi::Enum<Qt::ConnectionType> decl_Qt_ConnectionType_Enum ("Qt_ConnectionType",
    gsi::enum_const ("AutoConnection", Qt::AutoConnection, "@brief Enum constant Qt::AutoConnection") +
    gsi::enum_const ("DirectConnection", Qt::DirectConnection, "@brief Enum constant Qt::DirectConnection") +
    gsi::enum_const ("QueuedConnection", Qt::QueuedConnection, "@brief Enum constant Qt::QueuedConnection") +
    gsi::enum_const ("AutoCompatConnection", Qt::AutoCompatConnection, "@brief Enum constant Qt::AutoCompatConnection") +
    gsi::enum_const ("BlockingQueuedConnection", Qt::BlockingQueuedConnection, "@brief Enum constant Qt::BlockingQueuedConnection") +
    gsi::enum_const ("UniqueConnection", Qt::UniqueConnection, "@brief Enum constant Qt::UniqueConnection"),
  "@qt\n@brief This class represents the Qt::ConnectionType enum");

static gsi::QFlagsClass<Qt::ConnectionType > decl_Qt_ConnectionType_Enums ("Qt_QFlags_ConnectionType",
  "@qt\n@brief This class represents the QFlags<Qt::ConnectionType> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ConnectionType_Enum_in_parent (decl_Qt_ConnectionType_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ConnectionType_Enum_as_child (decl_Qt_ConnectionType_Enum, "ConnectionType");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ConnectionType_Enums_as_child (decl_Qt_ConnectionType_Enums, "QFlags_ConnectionType");

}


//  Implementation of the enum wrapper class for Qt::ContextMenuPolicy
namespace qt_gsi
{

static gsi::Enum<Qt::ContextMenuPolicy> decl_Qt_ContextMenuPolicy_Enum ("Qt_ContextMenuPolicy",
    gsi::enum_const ("NoContextMenu", Qt::NoContextMenu, "@brief Enum constant Qt::NoContextMenu") +
    gsi::enum_const ("DefaultContextMenu", Qt::DefaultContextMenu, "@brief Enum constant Qt::DefaultContextMenu") +
    gsi::enum_const ("ActionsContextMenu", Qt::ActionsContextMenu, "@brief Enum constant Qt::ActionsContextMenu") +
    gsi::enum_const ("CustomContextMenu", Qt::CustomContextMenu, "@brief Enum constant Qt::CustomContextMenu") +
    gsi::enum_const ("PreventContextMenu", Qt::PreventContextMenu, "@brief Enum constant Qt::PreventContextMenu"),
  "@qt\n@brief This class represents the Qt::ContextMenuPolicy enum");

static gsi::QFlagsClass<Qt::ContextMenuPolicy > decl_Qt_ContextMenuPolicy_Enums ("Qt_QFlags_ContextMenuPolicy",
  "@qt\n@brief This class represents the QFlags<Qt::ContextMenuPolicy> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ContextMenuPolicy_Enum_in_parent (decl_Qt_ContextMenuPolicy_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ContextMenuPolicy_Enum_as_child (decl_Qt_ContextMenuPolicy_Enum, "ContextMenuPolicy");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ContextMenuPolicy_Enums_as_child (decl_Qt_ContextMenuPolicy_Enums, "QFlags_ContextMenuPolicy");

}


//  Implementation of the enum wrapper class for Qt::CoordinateSystem
namespace qt_gsi
{

static gsi::Enum<Qt::CoordinateSystem> decl_Qt_CoordinateSystem_Enum ("Qt_CoordinateSystem",
    gsi::enum_const ("DeviceCoordinates", Qt::DeviceCoordinates, "@brief Enum constant Qt::DeviceCoordinates") +
    gsi::enum_const ("LogicalCoordinates", Qt::LogicalCoordinates, "@brief Enum constant Qt::LogicalCoordinates"),
  "@qt\n@brief This class represents the Qt::CoordinateSystem enum");

static gsi::QFlagsClass<Qt::CoordinateSystem > decl_Qt_CoordinateSystem_Enums ("Qt_QFlags_CoordinateSystem",
  "@qt\n@brief This class represents the QFlags<Qt::CoordinateSystem> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_CoordinateSystem_Enum_in_parent (decl_Qt_CoordinateSystem_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_CoordinateSystem_Enum_as_child (decl_Qt_CoordinateSystem_Enum, "CoordinateSystem");
static gsi::ClassExt<Qt_Namespace> decl_Qt_CoordinateSystem_Enums_as_child (decl_Qt_CoordinateSystem_Enums, "QFlags_CoordinateSystem");

}


//  Implementation of the enum wrapper class for Qt::Corner
namespace qt_gsi
{

static gsi::Enum<Qt::Corner> decl_Qt_Corner_Enum ("Qt_Corner",
    gsi::enum_const ("TopLeftCorner", Qt::TopLeftCorner, "@brief Enum constant Qt::TopLeftCorner") +
    gsi::enum_const ("TopRightCorner", Qt::TopRightCorner, "@brief Enum constant Qt::TopRightCorner") +
    gsi::enum_const ("BottomLeftCorner", Qt::BottomLeftCorner, "@brief Enum constant Qt::BottomLeftCorner") +
    gsi::enum_const ("BottomRightCorner", Qt::BottomRightCorner, "@brief Enum constant Qt::BottomRightCorner"),
  "@qt\n@brief This class represents the Qt::Corner enum");

static gsi::QFlagsClass<Qt::Corner > decl_Qt_Corner_Enums ("Qt_QFlags_Corner",
  "@qt\n@brief This class represents the QFlags<Qt::Corner> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_Corner_Enum_in_parent (decl_Qt_Corner_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_Corner_Enum_as_child (decl_Qt_Corner_Enum, "Corner");
static gsi::ClassExt<Qt_Namespace> decl_Qt_Corner_Enums_as_child (decl_Qt_Corner_Enums, "QFlags_Corner");

}


//  Implementation of the enum wrapper class for Qt::CursorShape
namespace qt_gsi
{

static gsi::Enum<Qt::CursorShape> decl_Qt_CursorShape_Enum ("Qt_CursorShape",
    gsi::enum_const ("ArrowCursor", Qt::ArrowCursor, "@brief Enum constant Qt::ArrowCursor") +
    gsi::enum_const ("UpArrowCursor", Qt::UpArrowCursor, "@brief Enum constant Qt::UpArrowCursor") +
    gsi::enum_const ("CrossCursor", Qt::CrossCursor, "@brief Enum constant Qt::CrossCursor") +
    gsi::enum_const ("WaitCursor", Qt::WaitCursor, "@brief Enum constant Qt::WaitCursor") +
    gsi::enum_const ("IBeamCursor", Qt::IBeamCursor, "@brief Enum constant Qt::IBeamCursor") +
    gsi::enum_const ("SizeVerCursor", Qt::SizeVerCursor, "@brief Enum constant Qt::SizeVerCursor") +
    gsi::enum_const ("SizeHorCursor", Qt::SizeHorCursor, "@brief Enum constant Qt::SizeHorCursor") +
    gsi::enum_const ("SizeBDiagCursor", Qt::SizeBDiagCursor, "@brief Enum constant Qt::SizeBDiagCursor") +
    gsi::enum_const ("SizeFDiagCursor", Qt::SizeFDiagCursor, "@brief Enum constant Qt::SizeFDiagCursor") +
    gsi::enum_const ("SizeAllCursor", Qt::SizeAllCursor, "@brief Enum constant Qt::SizeAllCursor") +
    gsi::enum_const ("BlankCursor", Qt::BlankCursor, "@brief Enum constant Qt::BlankCursor") +
    gsi::enum_const ("SplitVCursor", Qt::SplitVCursor, "@brief Enum constant Qt::SplitVCursor") +
    gsi::enum_const ("SplitHCursor", Qt::SplitHCursor, "@brief Enum constant Qt::SplitHCursor") +
    gsi::enum_const ("PointingHandCursor", Qt::PointingHandCursor, "@brief Enum constant Qt::PointingHandCursor") +
    gsi::enum_const ("ForbiddenCursor", Qt::ForbiddenCursor, "@brief Enum constant Qt::ForbiddenCursor") +
    gsi::enum_const ("WhatsThisCursor", Qt::WhatsThisCursor, "@brief Enum constant Qt::WhatsThisCursor") +
    gsi::enum_const ("BusyCursor", Qt::BusyCursor, "@brief Enum constant Qt::BusyCursor") +
    gsi::enum_const ("OpenHandCursor", Qt::OpenHandCursor, "@brief Enum constant Qt::OpenHandCursor") +
    gsi::enum_const ("ClosedHandCursor", Qt::ClosedHandCursor, "@brief Enum constant Qt::ClosedHandCursor") +
    gsi::enum_const ("LastCursor", Qt::LastCursor, "@brief Enum constant Qt::LastCursor") +
    gsi::enum_const ("BitmapCursor", Qt::BitmapCursor, "@brief Enum constant Qt::BitmapCursor") +
    gsi::enum_const ("CustomCursor", Qt::CustomCursor, "@brief Enum constant Qt::CustomCursor"),
  "@qt\n@brief This class represents the Qt::CursorShape enum");

static gsi::QFlagsClass<Qt::CursorShape > decl_Qt_CursorShape_Enums ("Qt_QFlags_CursorShape",
  "@qt\n@brief This class represents the QFlags<Qt::CursorShape> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_CursorShape_Enum_in_parent (decl_Qt_CursorShape_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_CursorShape_Enum_as_child (decl_Qt_CursorShape_Enum, "CursorShape");
static gsi::ClassExt<Qt_Namespace> decl_Qt_CursorShape_Enums_as_child (decl_Qt_CursorShape_Enums, "QFlags_CursorShape");

}


//  Implementation of the enum wrapper class for Qt::DateFormat
namespace qt_gsi
{

static gsi::Enum<Qt::DateFormat> decl_Qt_DateFormat_Enum ("Qt_DateFormat",
    gsi::enum_const ("TextDate", Qt::TextDate, "@brief Enum constant Qt::TextDate") +
    gsi::enum_const ("ISODate", Qt::ISODate, "@brief Enum constant Qt::ISODate") +
    gsi::enum_const ("SystemLocaleDate", Qt::SystemLocaleDate, "@brief Enum constant Qt::SystemLocaleDate") +
    gsi::enum_const ("LocalDate", Qt::LocalDate, "@brief Enum constant Qt::LocalDate") +
    gsi::enum_const ("LocaleDate", Qt::LocaleDate, "@brief Enum constant Qt::LocaleDate") +
    gsi::enum_const ("SystemLocaleShortDate", Qt::SystemLocaleShortDate, "@brief Enum constant Qt::SystemLocaleShortDate") +
    gsi::enum_const ("SystemLocaleLongDate", Qt::SystemLocaleLongDate, "@brief Enum constant Qt::SystemLocaleLongDate") +
    gsi::enum_const ("DefaultLocaleShortDate", Qt::DefaultLocaleShortDate, "@brief Enum constant Qt::DefaultLocaleShortDate") +
    gsi::enum_const ("DefaultLocaleLongDate", Qt::DefaultLocaleLongDate, "@brief Enum constant Qt::DefaultLocaleLongDate"),
  "@qt\n@brief This class represents the Qt::DateFormat enum");

static gsi::QFlagsClass<Qt::DateFormat > decl_Qt_DateFormat_Enums ("Qt_QFlags_DateFormat",
  "@qt\n@brief This class represents the QFlags<Qt::DateFormat> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_DateFormat_Enum_in_parent (decl_Qt_DateFormat_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_DateFormat_Enum_as_child (decl_Qt_DateFormat_Enum, "DateFormat");
static gsi::ClassExt<Qt_Namespace> decl_Qt_DateFormat_Enums_as_child (decl_Qt_DateFormat_Enums, "QFlags_DateFormat");

}


//  Implementation of the enum wrapper class for Qt::DayOfWeek
namespace qt_gsi
{

static gsi::Enum<Qt::DayOfWeek> decl_Qt_DayOfWeek_Enum ("Qt_DayOfWeek",
    gsi::enum_const ("Monday", Qt::Monday, "@brief Enum constant Qt::Monday") +
    gsi::enum_const ("Tuesday", Qt::Tuesday, "@brief Enum constant Qt::Tuesday") +
    gsi::enum_const ("Wednesday", Qt::Wednesday, "@brief Enum constant Qt::Wednesday") +
    gsi::enum_const ("Thursday", Qt::Thursday, "@brief Enum constant Qt::Thursday") +
    gsi::enum_const ("Friday", Qt::Friday, "@brief Enum constant Qt::Friday") +
    gsi::enum_const ("Saturday", Qt::Saturday, "@brief Enum constant Qt::Saturday") +
    gsi::enum_const ("Sunday", Qt::Sunday, "@brief Enum constant Qt::Sunday"),
  "@qt\n@brief This class represents the Qt::DayOfWeek enum");

static gsi::QFlagsClass<Qt::DayOfWeek > decl_Qt_DayOfWeek_Enums ("Qt_QFlags_DayOfWeek",
  "@qt\n@brief This class represents the QFlags<Qt::DayOfWeek> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_DayOfWeek_Enum_in_parent (decl_Qt_DayOfWeek_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_DayOfWeek_Enum_as_child (decl_Qt_DayOfWeek_Enum, "DayOfWeek");
static gsi::ClassExt<Qt_Namespace> decl_Qt_DayOfWeek_Enums_as_child (decl_Qt_DayOfWeek_Enums, "QFlags_DayOfWeek");

}


//  Implementation of the enum wrapper class for Qt::DockWidgetArea
namespace qt_gsi
{

static gsi::Enum<Qt::DockWidgetArea> decl_Qt_DockWidgetArea_Enum ("Qt_DockWidgetArea",
    gsi::enum_const ("LeftDockWidgetArea", Qt::LeftDockWidgetArea, "@brief Enum constant Qt::LeftDockWidgetArea") +
    gsi::enum_const ("RightDockWidgetArea", Qt::RightDockWidgetArea, "@brief Enum constant Qt::RightDockWidgetArea") +
    gsi::enum_const ("TopDockWidgetArea", Qt::TopDockWidgetArea, "@brief Enum constant Qt::TopDockWidgetArea") +
    gsi::enum_const ("BottomDockWidgetArea", Qt::BottomDockWidgetArea, "@brief Enum constant Qt::BottomDockWidgetArea") +
    gsi::enum_const ("DockWidgetArea_Mask", Qt::DockWidgetArea_Mask, "@brief Enum constant Qt::DockWidgetArea_Mask") +
    gsi::enum_const ("AllDockWidgetAreas", Qt::AllDockWidgetAreas, "@brief Enum constant Qt::AllDockWidgetAreas") +
    gsi::enum_const ("NoDockWidgetArea", Qt::NoDockWidgetArea, "@brief Enum constant Qt::NoDockWidgetArea"),
  "@qt\n@brief This class represents the Qt::DockWidgetArea enum");

static gsi::QFlagsClass<Qt::DockWidgetArea > decl_Qt_DockWidgetArea_Enums ("Qt_QFlags_DockWidgetArea",
  "@qt\n@brief This class represents the QFlags<Qt::DockWidgetArea> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_DockWidgetArea_Enum_in_parent (decl_Qt_DockWidgetArea_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_DockWidgetArea_Enum_as_child (decl_Qt_DockWidgetArea_Enum, "DockWidgetArea");
static gsi::ClassExt<Qt_Namespace> decl_Qt_DockWidgetArea_Enums_as_child (decl_Qt_DockWidgetArea_Enums, "QFlags_DockWidgetArea");

}


//  Implementation of the enum wrapper class for Qt::DockWidgetAreaSizes
namespace qt_gsi
{

static gsi::Enum<Qt::DockWidgetAreaSizes> decl_Qt_DockWidgetAreaSizes_Enum ("Qt_DockWidgetAreaSizes",
    gsi::enum_const ("NDockWidgetAreas", Qt::NDockWidgetAreas, "@brief Enum constant Qt::NDockWidgetAreas"),
  "@qt\n@brief This class represents the Qt::DockWidgetAreaSizes enum");

static gsi::QFlagsClass<Qt::DockWidgetAreaSizes > decl_Qt_DockWidgetAreaSizes_Enums ("Qt_QFlags_DockWidgetAreaSizes",
  "@qt\n@brief This class represents the QFlags<Qt::DockWidgetAreaSizes> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_DockWidgetAreaSizes_Enum_in_parent (decl_Qt_DockWidgetAreaSizes_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_DockWidgetAreaSizes_Enum_as_child (decl_Qt_DockWidgetAreaSizes_Enum, "DockWidgetAreaSizes");
static gsi::ClassExt<Qt_Namespace> decl_Qt_DockWidgetAreaSizes_Enums_as_child (decl_Qt_DockWidgetAreaSizes_Enums, "QFlags_DockWidgetAreaSizes");

}


//  Implementation of the enum wrapper class for Qt::DropAction
namespace qt_gsi
{

static gsi::Enum<Qt::DropAction> decl_Qt_DropAction_Enum ("Qt_DropAction",
    gsi::enum_const ("CopyAction", Qt::CopyAction, "@brief Enum constant Qt::CopyAction") +
    gsi::enum_const ("MoveAction", Qt::MoveAction, "@brief Enum constant Qt::MoveAction") +
    gsi::enum_const ("LinkAction", Qt::LinkAction, "@brief Enum constant Qt::LinkAction") +
    gsi::enum_const ("ActionMask", Qt::ActionMask, "@brief Enum constant Qt::ActionMask") +
    gsi::enum_const ("TargetMoveAction", Qt::TargetMoveAction, "@brief Enum constant Qt::TargetMoveAction") +
    gsi::enum_const ("IgnoreAction", Qt::IgnoreAction, "@brief Enum constant Qt::IgnoreAction"),
  "@qt\n@brief This class represents the Qt::DropAction enum");

static gsi::QFlagsClass<Qt::DropAction > decl_Qt_DropAction_Enums ("Qt_QFlags_DropAction",
  "@qt\n@brief This class represents the QFlags<Qt::DropAction> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_DropAction_Enum_in_parent (decl_Qt_DropAction_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_DropAction_Enum_as_child (decl_Qt_DropAction_Enum, "DropAction");
static gsi::ClassExt<Qt_Namespace> decl_Qt_DropAction_Enums_as_child (decl_Qt_DropAction_Enums, "QFlags_DropAction");

}


//  Implementation of the enum wrapper class for Qt::EventPriority
namespace qt_gsi
{

static gsi::Enum<Qt::EventPriority> decl_Qt_EventPriority_Enum ("Qt_EventPriority",
    gsi::enum_const ("HighEventPriority", Qt::HighEventPriority, "@brief Enum constant Qt::HighEventPriority") +
    gsi::enum_const ("NormalEventPriority", Qt::NormalEventPriority, "@brief Enum constant Qt::NormalEventPriority") +
    gsi::enum_const ("LowEventPriority", Qt::LowEventPriority, "@brief Enum constant Qt::LowEventPriority"),
  "@qt\n@brief This class represents the Qt::EventPriority enum");

static gsi::QFlagsClass<Qt::EventPriority > decl_Qt_EventPriority_Enums ("Qt_QFlags_EventPriority",
  "@qt\n@brief This class represents the QFlags<Qt::EventPriority> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_EventPriority_Enum_in_parent (decl_Qt_EventPriority_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_EventPriority_Enum_as_child (decl_Qt_EventPriority_Enum, "EventPriority");
static gsi::ClassExt<Qt_Namespace> decl_Qt_EventPriority_Enums_as_child (decl_Qt_EventPriority_Enums, "QFlags_EventPriority");

}


//  Implementation of the enum wrapper class for Qt::FillRule
namespace qt_gsi
{

static gsi::Enum<Qt::FillRule> decl_Qt_FillRule_Enum ("Qt_FillRule",
    gsi::enum_const ("OddEvenFill", Qt::OddEvenFill, "@brief Enum constant Qt::OddEvenFill") +
    gsi::enum_const ("WindingFill", Qt::WindingFill, "@brief Enum constant Qt::WindingFill"),
  "@qt\n@brief This class represents the Qt::FillRule enum");

static gsi::QFlagsClass<Qt::FillRule > decl_Qt_FillRule_Enums ("Qt_QFlags_FillRule",
  "@qt\n@brief This class represents the QFlags<Qt::FillRule> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_FillRule_Enum_in_parent (decl_Qt_FillRule_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_FillRule_Enum_as_child (decl_Qt_FillRule_Enum, "FillRule");
static gsi::ClassExt<Qt_Namespace> decl_Qt_FillRule_Enums_as_child (decl_Qt_FillRule_Enums, "QFlags_FillRule");

}


//  Implementation of the enum wrapper class for Qt::FocusPolicy
namespace qt_gsi
{

static gsi::Enum<Qt::FocusPolicy> decl_Qt_FocusPolicy_Enum ("Qt_FocusPolicy",
    gsi::enum_const ("NoFocus", Qt::NoFocus, "@brief Enum constant Qt::NoFocus") +
    gsi::enum_const ("TabFocus", Qt::TabFocus, "@brief Enum constant Qt::TabFocus") +
    gsi::enum_const ("ClickFocus", Qt::ClickFocus, "@brief Enum constant Qt::ClickFocus") +
    gsi::enum_const ("StrongFocus", Qt::StrongFocus, "@brief Enum constant Qt::StrongFocus") +
    gsi::enum_const ("WheelFocus", Qt::WheelFocus, "@brief Enum constant Qt::WheelFocus"),
  "@qt\n@brief This class represents the Qt::FocusPolicy enum");

static gsi::QFlagsClass<Qt::FocusPolicy > decl_Qt_FocusPolicy_Enums ("Qt_QFlags_FocusPolicy",
  "@qt\n@brief This class represents the QFlags<Qt::FocusPolicy> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_FocusPolicy_Enum_in_parent (decl_Qt_FocusPolicy_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_FocusPolicy_Enum_as_child (decl_Qt_FocusPolicy_Enum, "FocusPolicy");
static gsi::ClassExt<Qt_Namespace> decl_Qt_FocusPolicy_Enums_as_child (decl_Qt_FocusPolicy_Enums, "QFlags_FocusPolicy");

}


//  Implementation of the enum wrapper class for Qt::FocusReason
namespace qt_gsi
{

static gsi::Enum<Qt::FocusReason> decl_Qt_FocusReason_Enum ("Qt_FocusReason",
    gsi::enum_const ("MouseFocusReason", Qt::MouseFocusReason, "@brief Enum constant Qt::MouseFocusReason") +
    gsi::enum_const ("TabFocusReason", Qt::TabFocusReason, "@brief Enum constant Qt::TabFocusReason") +
    gsi::enum_const ("BacktabFocusReason", Qt::BacktabFocusReason, "@brief Enum constant Qt::BacktabFocusReason") +
    gsi::enum_const ("ActiveWindowFocusReason", Qt::ActiveWindowFocusReason, "@brief Enum constant Qt::ActiveWindowFocusReason") +
    gsi::enum_const ("PopupFocusReason", Qt::PopupFocusReason, "@brief Enum constant Qt::PopupFocusReason") +
    gsi::enum_const ("ShortcutFocusReason", Qt::ShortcutFocusReason, "@brief Enum constant Qt::ShortcutFocusReason") +
    gsi::enum_const ("MenuBarFocusReason", Qt::MenuBarFocusReason, "@brief Enum constant Qt::MenuBarFocusReason") +
    gsi::enum_const ("OtherFocusReason", Qt::OtherFocusReason, "@brief Enum constant Qt::OtherFocusReason") +
    gsi::enum_const ("NoFocusReason", Qt::NoFocusReason, "@brief Enum constant Qt::NoFocusReason"),
  "@qt\n@brief This class represents the Qt::FocusReason enum");

static gsi::QFlagsClass<Qt::FocusReason > decl_Qt_FocusReason_Enums ("Qt_QFlags_FocusReason",
  "@qt\n@brief This class represents the QFlags<Qt::FocusReason> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_FocusReason_Enum_in_parent (decl_Qt_FocusReason_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_FocusReason_Enum_as_child (decl_Qt_FocusReason_Enum, "FocusReason");
static gsi::ClassExt<Qt_Namespace> decl_Qt_FocusReason_Enums_as_child (decl_Qt_FocusReason_Enums, "QFlags_FocusReason");

}


//  Implementation of the enum wrapper class for Qt::GestureFlag
namespace qt_gsi
{

static gsi::Enum<Qt::GestureFlag> decl_Qt_GestureFlag_Enum ("Qt_GestureFlag",
    gsi::enum_const ("DontStartGestureOnChildren", Qt::DontStartGestureOnChildren, "@brief Enum constant Qt::DontStartGestureOnChildren") +
    gsi::enum_const ("ReceivePartialGestures", Qt::ReceivePartialGestures, "@brief Enum constant Qt::ReceivePartialGestures"),
  "@qt\n@brief This class represents the Qt::GestureFlag enum");

static gsi::QFlagsClass<Qt::GestureFlag > decl_Qt_GestureFlag_Enums ("Qt_QFlags_GestureFlag",
  "@qt\n@brief This class represents the QFlags<Qt::GestureFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_GestureFlag_Enum_in_parent (decl_Qt_GestureFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureFlag_Enum_as_child (decl_Qt_GestureFlag_Enum, "GestureFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureFlag_Enums_as_child (decl_Qt_GestureFlag_Enums, "QFlags_GestureFlag");

}


//  Implementation of the enum wrapper class for Qt::GestureState
namespace qt_gsi
{

static gsi::Enum<Qt::GestureState> decl_Qt_GestureState_Enum ("Qt_GestureState",
    gsi::enum_const ("NoGesture", Qt::NoGesture, "@brief Enum constant Qt::NoGesture") +
    gsi::enum_const ("GestureStarted", Qt::GestureStarted, "@brief Enum constant Qt::GestureStarted") +
    gsi::enum_const ("GestureUpdated", Qt::GestureUpdated, "@brief Enum constant Qt::GestureUpdated") +
    gsi::enum_const ("GestureFinished", Qt::GestureFinished, "@brief Enum constant Qt::GestureFinished") +
    gsi::enum_const ("GestureCanceled", Qt::GestureCanceled, "@brief Enum constant Qt::GestureCanceled"),
  "@qt\n@brief This class represents the Qt::GestureState enum");

static gsi::QFlagsClass<Qt::GestureState > decl_Qt_GestureState_Enums ("Qt_QFlags_GestureState",
  "@qt\n@brief This class represents the QFlags<Qt::GestureState> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_GestureState_Enum_in_parent (decl_Qt_GestureState_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureState_Enum_as_child (decl_Qt_GestureState_Enum, "GestureState");
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureState_Enums_as_child (decl_Qt_GestureState_Enums, "QFlags_GestureState");

}


//  Implementation of the enum wrapper class for Qt::GestureType
namespace qt_gsi
{

static gsi::Enum<Qt::GestureType> decl_Qt_GestureType_Enum ("Qt_GestureType",
    gsi::enum_const ("TapGesture", Qt::TapGesture, "@brief Enum constant Qt::TapGesture") +
    gsi::enum_const ("TapAndHoldGesture", Qt::TapAndHoldGesture, "@brief Enum constant Qt::TapAndHoldGesture") +
    gsi::enum_const ("PanGesture", Qt::PanGesture, "@brief Enum constant Qt::PanGesture") +
    gsi::enum_const ("PinchGesture", Qt::PinchGesture, "@brief Enum constant Qt::PinchGesture") +
    gsi::enum_const ("SwipeGesture", Qt::SwipeGesture, "@brief Enum constant Qt::SwipeGesture") +
    gsi::enum_const ("CustomGesture", Qt::CustomGesture, "@brief Enum constant Qt::CustomGesture") +
    gsi::enum_const ("LastGestureType", Qt::LastGestureType, "@brief Enum constant Qt::LastGestureType"),
  "@qt\n@brief This class represents the Qt::GestureType enum");

static gsi::QFlagsClass<Qt::GestureType > decl_Qt_GestureType_Enums ("Qt_QFlags_GestureType",
  "@qt\n@brief This class represents the QFlags<Qt::GestureType> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_GestureType_Enum_in_parent (decl_Qt_GestureType_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureType_Enum_as_child (decl_Qt_GestureType_Enum, "GestureType");
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureType_Enums_as_child (decl_Qt_GestureType_Enums, "QFlags_GestureType");

}


//  Implementation of the enum wrapper class for Qt::GlobalColor
namespace qt_gsi
{

static gsi::Enum<Qt::GlobalColor> decl_Qt_GlobalColor_Enum ("Qt_GlobalColor",
    gsi::enum_const ("color0", Qt::color0, "@brief Enum constant Qt::color0") +
    gsi::enum_const ("color1", Qt::color1, "@brief Enum constant Qt::color1") +
    gsi::enum_const ("black", Qt::black, "@brief Enum constant Qt::black") +
    gsi::enum_const ("white", Qt::white, "@brief Enum constant Qt::white") +
    gsi::enum_const ("darkGray", Qt::darkGray, "@brief Enum constant Qt::darkGray") +
    gsi::enum_const ("gray", Qt::gray, "@brief Enum constant Qt::gray") +
    gsi::enum_const ("lightGray", Qt::lightGray, "@brief Enum constant Qt::lightGray") +
    gsi::enum_const ("red", Qt::red, "@brief Enum constant Qt::red") +
    gsi::enum_const ("green", Qt::green, "@brief Enum constant Qt::green") +
    gsi::enum_const ("blue", Qt::blue, "@brief Enum constant Qt::blue") +
    gsi::enum_const ("cyan", Qt::cyan, "@brief Enum constant Qt::cyan") +
    gsi::enum_const ("magenta", Qt::magenta, "@brief Enum constant Qt::magenta") +
    gsi::enum_const ("yellow", Qt::yellow, "@brief Enum constant Qt::yellow") +
    gsi::enum_const ("darkRed", Qt::darkRed, "@brief Enum constant Qt::darkRed") +
    gsi::enum_const ("darkGreen", Qt::darkGreen, "@brief Enum constant Qt::darkGreen") +
    gsi::enum_const ("darkBlue", Qt::darkBlue, "@brief Enum constant Qt::darkBlue") +
    gsi::enum_const ("darkCyan", Qt::darkCyan, "@brief Enum constant Qt::darkCyan") +
    gsi::enum_const ("darkMagenta", Qt::darkMagenta, "@brief Enum constant Qt::darkMagenta") +
    gsi::enum_const ("darkYellow", Qt::darkYellow, "@brief Enum constant Qt::darkYellow") +
    gsi::enum_const ("transparent", Qt::transparent, "@brief Enum constant Qt::transparent"),
  "@qt\n@brief This class represents the Qt::GlobalColor enum");

static gsi::QFlagsClass<Qt::GlobalColor > decl_Qt_GlobalColor_Enums ("Qt_QFlags_GlobalColor",
  "@qt\n@brief This class represents the QFlags<Qt::GlobalColor> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_GlobalColor_Enum_in_parent (decl_Qt_GlobalColor_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_GlobalColor_Enum_as_child (decl_Qt_GlobalColor_Enum, "GlobalColor");
static gsi::ClassExt<Qt_Namespace> decl_Qt_GlobalColor_Enums_as_child (decl_Qt_GlobalColor_Enums, "QFlags_GlobalColor");

}


//  Implementation of the enum wrapper class for Qt::HitTestAccuracy
namespace qt_gsi
{

static gsi::Enum<Qt::HitTestAccuracy> decl_Qt_HitTestAccuracy_Enum ("Qt_HitTestAccuracy",
    gsi::enum_const ("ExactHit", Qt::ExactHit, "@brief Enum constant Qt::ExactHit") +
    gsi::enum_const ("FuzzyHit", Qt::FuzzyHit, "@brief Enum constant Qt::FuzzyHit"),
  "@qt\n@brief This class represents the Qt::HitTestAccuracy enum");

static gsi::QFlagsClass<Qt::HitTestAccuracy > decl_Qt_HitTestAccuracy_Enums ("Qt_QFlags_HitTestAccuracy",
  "@qt\n@brief This class represents the QFlags<Qt::HitTestAccuracy> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_HitTestAccuracy_Enum_in_parent (decl_Qt_HitTestAccuracy_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_HitTestAccuracy_Enum_as_child (decl_Qt_HitTestAccuracy_Enum, "HitTestAccuracy");
static gsi::ClassExt<Qt_Namespace> decl_Qt_HitTestAccuracy_Enums_as_child (decl_Qt_HitTestAccuracy_Enums, "QFlags_HitTestAccuracy");

}


//  Implementation of the enum wrapper class for Qt::ImageConversionFlag
namespace qt_gsi
{

static gsi::Enum<Qt::ImageConversionFlag> decl_Qt_ImageConversionFlag_Enum ("Qt_ImageConversionFlag",
    gsi::enum_const ("ColorMode_Mask", Qt::ColorMode_Mask, "@brief Enum constant Qt::ColorMode_Mask") +
    gsi::enum_const ("AutoColor", Qt::AutoColor, "@brief Enum constant Qt::AutoColor") +
    gsi::enum_const ("ColorOnly", Qt::ColorOnly, "@brief Enum constant Qt::ColorOnly") +
    gsi::enum_const ("MonoOnly", Qt::MonoOnly, "@brief Enum constant Qt::MonoOnly") +
    gsi::enum_const ("AlphaDither_Mask", Qt::AlphaDither_Mask, "@brief Enum constant Qt::AlphaDither_Mask") +
    gsi::enum_const ("ThresholdAlphaDither", Qt::ThresholdAlphaDither, "@brief Enum constant Qt::ThresholdAlphaDither") +
    gsi::enum_const ("OrderedAlphaDither", Qt::OrderedAlphaDither, "@brief Enum constant Qt::OrderedAlphaDither") +
    gsi::enum_const ("DiffuseAlphaDither", Qt::DiffuseAlphaDither, "@brief Enum constant Qt::DiffuseAlphaDither") +
    gsi::enum_const ("NoAlpha", Qt::NoAlpha, "@brief Enum constant Qt::NoAlpha") +
    gsi::enum_const ("Dither_Mask", Qt::Dither_Mask, "@brief Enum constant Qt::Dither_Mask") +
    gsi::enum_const ("DiffuseDither", Qt::DiffuseDither, "@brief Enum constant Qt::DiffuseDither") +
    gsi::enum_const ("OrderedDither", Qt::OrderedDither, "@brief Enum constant Qt::OrderedDither") +
    gsi::enum_const ("ThresholdDither", Qt::ThresholdDither, "@brief Enum constant Qt::ThresholdDither") +
    gsi::enum_const ("DitherMode_Mask", Qt::DitherMode_Mask, "@brief Enum constant Qt::DitherMode_Mask") +
    gsi::enum_const ("AutoDither", Qt::AutoDither, "@brief Enum constant Qt::AutoDither") +
    gsi::enum_const ("PreferDither", Qt::PreferDither, "@brief Enum constant Qt::PreferDither") +
    gsi::enum_const ("AvoidDither", Qt::AvoidDither, "@brief Enum constant Qt::AvoidDither") +
    gsi::enum_const ("NoOpaqueDetection", Qt::NoOpaqueDetection, "@brief Enum constant Qt::NoOpaqueDetection"),
  "@qt\n@brief This class represents the Qt::ImageConversionFlag enum");

static gsi::QFlagsClass<Qt::ImageConversionFlag > decl_Qt_ImageConversionFlag_Enums ("Qt_QFlags_ImageConversionFlag",
  "@qt\n@brief This class represents the QFlags<Qt::ImageConversionFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ImageConversionFlag_Enum_in_parent (decl_Qt_ImageConversionFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ImageConversionFlag_Enum_as_child (decl_Qt_ImageConversionFlag_Enum, "ImageConversionFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ImageConversionFlag_Enums_as_child (decl_Qt_ImageConversionFlag_Enums, "QFlags_ImageConversionFlag");

}


//  Implementation of the enum wrapper class for Qt::Initialization
namespace qt_gsi
{

static gsi::Enum<Qt::Initialization> decl_Qt_Initialization_Enum ("Qt_Initialization",
    gsi::enum_const ("Uninitialized", Qt::Uninitialized, "@brief Enum constant Qt::Uninitialized"),
  "@qt\n@brief This class represents the Qt::Initialization enum");

static gsi::QFlagsClass<Qt::Initialization > decl_Qt_Initialization_Enums ("Qt_QFlags_Initialization",
  "@qt\n@brief This class represents the QFlags<Qt::Initialization> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_Initialization_Enum_in_parent (decl_Qt_Initialization_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_Initialization_Enum_as_child (decl_Qt_Initialization_Enum, "Initialization");
static gsi::ClassExt<Qt_Namespace> decl_Qt_Initialization_Enums_as_child (decl_Qt_Initialization_Enums, "QFlags_Initialization");

}


//  Implementation of the enum wrapper class for Qt::InputMethodHint
namespace qt_gsi
{

static gsi::Enum<Qt::InputMethodHint> decl_Qt_InputMethodHint_Enum ("Qt_InputMethodHint",
    gsi::enum_const ("ImhNone", Qt::ImhNone, "@brief Enum constant Qt::ImhNone") +
    gsi::enum_const ("ImhHiddenText", Qt::ImhHiddenText, "@brief Enum constant Qt::ImhHiddenText") +
    gsi::enum_const ("ImhNoAutoUppercase", Qt::ImhNoAutoUppercase, "@brief Enum constant Qt::ImhNoAutoUppercase") +
    gsi::enum_const ("ImhPreferNumbers", Qt::ImhPreferNumbers, "@brief Enum constant Qt::ImhPreferNumbers") +
    gsi::enum_const ("ImhPreferUppercase", Qt::ImhPreferUppercase, "@brief Enum constant Qt::ImhPreferUppercase") +
    gsi::enum_const ("ImhPreferLowercase", Qt::ImhPreferLowercase, "@brief Enum constant Qt::ImhPreferLowercase") +
    gsi::enum_const ("ImhNoPredictiveText", Qt::ImhNoPredictiveText, "@brief Enum constant Qt::ImhNoPredictiveText") +
    gsi::enum_const ("ImhDigitsOnly", Qt::ImhDigitsOnly, "@brief Enum constant Qt::ImhDigitsOnly") +
    gsi::enum_const ("ImhFormattedNumbersOnly", Qt::ImhFormattedNumbersOnly, "@brief Enum constant Qt::ImhFormattedNumbersOnly") +
    gsi::enum_const ("ImhUppercaseOnly", Qt::ImhUppercaseOnly, "@brief Enum constant Qt::ImhUppercaseOnly") +
    gsi::enum_const ("ImhLowercaseOnly", Qt::ImhLowercaseOnly, "@brief Enum constant Qt::ImhLowercaseOnly") +
    gsi::enum_const ("ImhDialableCharactersOnly", Qt::ImhDialableCharactersOnly, "@brief Enum constant Qt::ImhDialableCharactersOnly") +
    gsi::enum_const ("ImhEmailCharactersOnly", Qt::ImhEmailCharactersOnly, "@brief Enum constant Qt::ImhEmailCharactersOnly") +
    gsi::enum_const ("ImhUrlCharactersOnly", Qt::ImhUrlCharactersOnly, "@brief Enum constant Qt::ImhUrlCharactersOnly") +
    gsi::enum_const ("ImhExclusiveInputMask", Qt::ImhExclusiveInputMask, "@brief Enum constant Qt::ImhExclusiveInputMask"),
  "@qt\n@brief This class represents the Qt::InputMethodHint enum");

static gsi::QFlagsClass<Qt::InputMethodHint > decl_Qt_InputMethodHint_Enums ("Qt_QFlags_InputMethodHint",
  "@qt\n@brief This class represents the QFlags<Qt::InputMethodHint> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_InputMethodHint_Enum_in_parent (decl_Qt_InputMethodHint_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_InputMethodHint_Enum_as_child (decl_Qt_InputMethodHint_Enum, "InputMethodHint");
static gsi::ClassExt<Qt_Namespace> decl_Qt_InputMethodHint_Enums_as_child (decl_Qt_InputMethodHint_Enums, "QFlags_InputMethodHint");

}


//  Implementation of the enum wrapper class for Qt::InputMethodQuery
namespace qt_gsi
{

static gsi::Enum<Qt::InputMethodQuery> decl_Qt_InputMethodQuery_Enum ("Qt_InputMethodQuery",
    gsi::enum_const ("ImMicroFocus", Qt::ImMicroFocus, "@brief Enum constant Qt::ImMicroFocus") +
    gsi::enum_const ("ImFont", Qt::ImFont, "@brief Enum constant Qt::ImFont") +
    gsi::enum_const ("ImCursorPosition", Qt::ImCursorPosition, "@brief Enum constant Qt::ImCursorPosition") +
    gsi::enum_const ("ImSurroundingText", Qt::ImSurroundingText, "@brief Enum constant Qt::ImSurroundingText") +
    gsi::enum_const ("ImCurrentSelection", Qt::ImCurrentSelection, "@brief Enum constant Qt::ImCurrentSelection") +
    gsi::enum_const ("ImMaximumTextLength", Qt::ImMaximumTextLength, "@brief Enum constant Qt::ImMaximumTextLength") +
    gsi::enum_const ("ImAnchorPosition", Qt::ImAnchorPosition, "@brief Enum constant Qt::ImAnchorPosition"),
  "@qt\n@brief This class represents the Qt::InputMethodQuery enum");

static gsi::QFlagsClass<Qt::InputMethodQuery > decl_Qt_InputMethodQuery_Enums ("Qt_QFlags_InputMethodQuery",
  "@qt\n@brief This class represents the QFlags<Qt::InputMethodQuery> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_InputMethodQuery_Enum_in_parent (decl_Qt_InputMethodQuery_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_InputMethodQuery_Enum_as_child (decl_Qt_InputMethodQuery_Enum, "InputMethodQuery");
static gsi::ClassExt<Qt_Namespace> decl_Qt_InputMethodQuery_Enums_as_child (decl_Qt_InputMethodQuery_Enums, "QFlags_InputMethodQuery");

}


//  Implementation of the enum wrapper class for Qt::ItemDataRole
namespace qt_gsi
{

static gsi::Enum<Qt::ItemDataRole> decl_Qt_ItemDataRole_Enum ("Qt_ItemDataRole",
    gsi::enum_const ("DisplayRole", Qt::DisplayRole, "@brief Enum constant Qt::DisplayRole") +
    gsi::enum_const ("DecorationRole", Qt::DecorationRole, "@brief Enum constant Qt::DecorationRole") +
    gsi::enum_const ("EditRole", Qt::EditRole, "@brief Enum constant Qt::EditRole") +
    gsi::enum_const ("ToolTipRole", Qt::ToolTipRole, "@brief Enum constant Qt::ToolTipRole") +
    gsi::enum_const ("StatusTipRole", Qt::StatusTipRole, "@brief Enum constant Qt::StatusTipRole") +
    gsi::enum_const ("WhatsThisRole", Qt::WhatsThisRole, "@brief Enum constant Qt::WhatsThisRole") +
    gsi::enum_const ("FontRole", Qt::FontRole, "@brief Enum constant Qt::FontRole") +
    gsi::enum_const ("TextAlignmentRole", Qt::TextAlignmentRole, "@brief Enum constant Qt::TextAlignmentRole") +
    gsi::enum_const ("BackgroundColorRole", Qt::BackgroundColorRole, "@brief Enum constant Qt::BackgroundColorRole") +
    gsi::enum_const ("BackgroundRole", Qt::BackgroundRole, "@brief Enum constant Qt::BackgroundRole") +
    gsi::enum_const ("TextColorRole", Qt::TextColorRole, "@brief Enum constant Qt::TextColorRole") +
    gsi::enum_const ("ForegroundRole", Qt::ForegroundRole, "@brief Enum constant Qt::ForegroundRole") +
    gsi::enum_const ("CheckStateRole", Qt::CheckStateRole, "@brief Enum constant Qt::CheckStateRole") +
    gsi::enum_const ("AccessibleTextRole", Qt::AccessibleTextRole, "@brief Enum constant Qt::AccessibleTextRole") +
    gsi::enum_const ("AccessibleDescriptionRole", Qt::AccessibleDescriptionRole, "@brief Enum constant Qt::AccessibleDescriptionRole") +
    gsi::enum_const ("SizeHintRole", Qt::SizeHintRole, "@brief Enum constant Qt::SizeHintRole") +
    gsi::enum_const ("DisplayPropertyRole", Qt::DisplayPropertyRole, "@brief Enum constant Qt::DisplayPropertyRole") +
    gsi::enum_const ("DecorationPropertyRole", Qt::DecorationPropertyRole, "@brief Enum constant Qt::DecorationPropertyRole") +
    gsi::enum_const ("ToolTipPropertyRole", Qt::ToolTipPropertyRole, "@brief Enum constant Qt::ToolTipPropertyRole") +
    gsi::enum_const ("StatusTipPropertyRole", Qt::StatusTipPropertyRole, "@brief Enum constant Qt::StatusTipPropertyRole") +
    gsi::enum_const ("WhatsThisPropertyRole", Qt::WhatsThisPropertyRole, "@brief Enum constant Qt::WhatsThisPropertyRole") +
    gsi::enum_const ("UserRole", Qt::UserRole, "@brief Enum constant Qt::UserRole"),
  "@qt\n@brief This class represents the Qt::ItemDataRole enum");

static gsi::QFlagsClass<Qt::ItemDataRole > decl_Qt_ItemDataRole_Enums ("Qt_QFlags_ItemDataRole",
  "@qt\n@brief This class represents the QFlags<Qt::ItemDataRole> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ItemDataRole_Enum_in_parent (decl_Qt_ItemDataRole_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemDataRole_Enum_as_child (decl_Qt_ItemDataRole_Enum, "ItemDataRole");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemDataRole_Enums_as_child (decl_Qt_ItemDataRole_Enums, "QFlags_ItemDataRole");

}


//  Implementation of the enum wrapper class for Qt::ItemFlag
namespace qt_gsi
{

static gsi::Enum<Qt::ItemFlag> decl_Qt_ItemFlag_Enum ("Qt_ItemFlag",
    gsi::enum_const ("NoItemFlags", Qt::NoItemFlags, "@brief Enum constant Qt::NoItemFlags") +
    gsi::enum_const ("ItemIsSelectable", Qt::ItemIsSelectable, "@brief Enum constant Qt::ItemIsSelectable") +
    gsi::enum_const ("ItemIsEditable", Qt::ItemIsEditable, "@brief Enum constant Qt::ItemIsEditable") +
    gsi::enum_const ("ItemIsDragEnabled", Qt::ItemIsDragEnabled, "@brief Enum constant Qt::ItemIsDragEnabled") +
    gsi::enum_const ("ItemIsDropEnabled", Qt::ItemIsDropEnabled, "@brief Enum constant Qt::ItemIsDropEnabled") +
    gsi::enum_const ("ItemIsUserCheckable", Qt::ItemIsUserCheckable, "@brief Enum constant Qt::ItemIsUserCheckable") +
    gsi::enum_const ("ItemIsEnabled", Qt::ItemIsEnabled, "@brief Enum constant Qt::ItemIsEnabled") +
    gsi::enum_const ("ItemIsTristate", Qt::ItemIsTristate, "@brief Enum constant Qt::ItemIsTristate"),
  "@qt\n@brief This class represents the Qt::ItemFlag enum");

static gsi::QFlagsClass<Qt::ItemFlag > decl_Qt_ItemFlag_Enums ("Qt_QFlags_ItemFlag",
  "@qt\n@brief This class represents the QFlags<Qt::ItemFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ItemFlag_Enum_in_parent (decl_Qt_ItemFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemFlag_Enum_as_child (decl_Qt_ItemFlag_Enum, "ItemFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemFlag_Enums_as_child (decl_Qt_ItemFlag_Enums, "QFlags_ItemFlag");

}


//  Implementation of the enum wrapper class for Qt::ItemSelectionMode
namespace qt_gsi
{

static gsi::Enum<Qt::ItemSelectionMode> decl_Qt_ItemSelectionMode_Enum ("Qt_ItemSelectionMode",
    gsi::enum_const ("ContainsItemShape", Qt::ContainsItemShape, "@brief Enum constant Qt::ContainsItemShape") +
    gsi::enum_const ("IntersectsItemShape", Qt::IntersectsItemShape, "@brief Enum constant Qt::IntersectsItemShape") +
    gsi::enum_const ("ContainsItemBoundingRect", Qt::ContainsItemBoundingRect, "@brief Enum constant Qt::ContainsItemBoundingRect") +
    gsi::enum_const ("IntersectsItemBoundingRect", Qt::IntersectsItemBoundingRect, "@brief Enum constant Qt::IntersectsItemBoundingRect"),
  "@qt\n@brief This class represents the Qt::ItemSelectionMode enum");

static gsi::QFlagsClass<Qt::ItemSelectionMode > decl_Qt_ItemSelectionMode_Enums ("Qt_QFlags_ItemSelectionMode",
  "@qt\n@brief This class represents the QFlags<Qt::ItemSelectionMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ItemSelectionMode_Enum_in_parent (decl_Qt_ItemSelectionMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemSelectionMode_Enum_as_child (decl_Qt_ItemSelectionMode_Enum, "ItemSelectionMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemSelectionMode_Enums_as_child (decl_Qt_ItemSelectionMode_Enums, "QFlags_ItemSelectionMode");

}


//  Implementation of the enum wrapper class for Qt::Key
namespace qt_gsi
{

static gsi::Enum<Qt::Key> decl_Qt_Key_Enum ("Qt_Key",
    gsi::enum_const ("Key_Escape", Qt::Key_Escape, "@brief Enum constant Qt::Key_Escape") +
    gsi::enum_const ("Key_Tab", Qt::Key_Tab, "@brief Enum constant Qt::Key_Tab") +
    gsi::enum_const ("Key_Backtab", Qt::Key_Backtab, "@brief Enum constant Qt::Key_Backtab") +
    gsi::enum_const ("Key_Backspace", Qt::Key_Backspace, "@brief Enum constant Qt::Key_Backspace") +
    gsi::enum_const ("Key_Return", Qt::Key_Return, "@brief Enum constant Qt::Key_Return") +
    gsi::enum_const ("Key_Enter", Qt::Key_Enter, "@brief Enum constant Qt::Key_Enter") +
    gsi::enum_const ("Key_Insert", Qt::Key_Insert, "@brief Enum constant Qt::Key_Insert") +
    gsi::enum_const ("Key_Delete", Qt::Key_Delete, "@brief Enum constant Qt::Key_Delete") +
    gsi::enum_const ("Key_Pause", Qt::Key_Pause, "@brief Enum constant Qt::Key_Pause") +
    gsi::enum_const ("Key_Print", Qt::Key_Print, "@brief Enum constant Qt::Key_Print") +
    gsi::enum_const ("Key_SysReq", Qt::Key_SysReq, "@brief Enum constant Qt::Key_SysReq") +
    gsi::enum_const ("Key_Clear", Qt::Key_Clear, "@brief Enum constant Qt::Key_Clear") +
    gsi::enum_const ("Key_Home", Qt::Key_Home, "@brief Enum constant Qt::Key_Home") +
    gsi::enum_const ("Key_End", Qt::Key_End, "@brief Enum constant Qt::Key_End") +
    gsi::enum_const ("Key_Left", Qt::Key_Left, "@brief Enum constant Qt::Key_Left") +
    gsi::enum_const ("Key_Up", Qt::Key_Up, "@brief Enum constant Qt::Key_Up") +
    gsi::enum_const ("Key_Right", Qt::Key_Right, "@brief Enum constant Qt::Key_Right") +
    gsi::enum_const ("Key_Down", Qt::Key_Down, "@brief Enum constant Qt::Key_Down") +
    gsi::enum_const ("Key_PageUp", Qt::Key_PageUp, "@brief Enum constant Qt::Key_PageUp") +
    gsi::enum_const ("Key_PageDown", Qt::Key_PageDown, "@brief Enum constant Qt::Key_PageDown") +
    gsi::enum_const ("Key_Shift", Qt::Key_Shift, "@brief Enum constant Qt::Key_Shift") +
    gsi::enum_const ("Key_Control", Qt::Key_Control, "@brief Enum constant Qt::Key_Control") +
    gsi::enum_const ("Key_Meta", Qt::Key_Meta, "@brief Enum constant Qt::Key_Meta") +
    gsi::enum_const ("Key_Alt", Qt::Key_Alt, "@brief Enum constant Qt::Key_Alt") +
    gsi::enum_const ("Key_CapsLock", Qt::Key_CapsLock, "@brief Enum constant Qt::Key_CapsLock") +
    gsi::enum_const ("Key_NumLock", Qt::Key_NumLock, "@brief Enum constant Qt::Key_NumLock") +
    gsi::enum_const ("Key_ScrollLock", Qt::Key_ScrollLock, "@brief Enum constant Qt::Key_ScrollLock") +
    gsi::enum_const ("Key_F1", Qt::Key_F1, "@brief Enum constant Qt::Key_F1") +
    gsi::enum_const ("Key_F2", Qt::Key_F2, "@brief Enum constant Qt::Key_F2") +
    gsi::enum_const ("Key_F3", Qt::Key_F3, "@brief Enum constant Qt::Key_F3") +
    gsi::enum_const ("Key_F4", Qt::Key_F4, "@brief Enum constant Qt::Key_F4") +
    gsi::enum_const ("Key_F5", Qt::Key_F5, "@brief Enum constant Qt::Key_F5") +
    gsi::enum_const ("Key_F6", Qt::Key_F6, "@brief Enum constant Qt::Key_F6") +
    gsi::enum_const ("Key_F7", Qt::Key_F7, "@brief Enum constant Qt::Key_F7") +
    gsi::enum_const ("Key_F8", Qt::Key_F8, "@brief Enum constant Qt::Key_F8") +
    gsi::enum_const ("Key_F9", Qt::Key_F9, "@brief Enum constant Qt::Key_F9") +
    gsi::enum_const ("Key_F10", Qt::Key_F10, "@brief Enum constant Qt::Key_F10") +
    gsi::enum_const ("Key_F11", Qt::Key_F11, "@brief Enum constant Qt::Key_F11") +
    gsi::enum_const ("Key_F12", Qt::Key_F12, "@brief Enum constant Qt::Key_F12") +
    gsi::enum_const ("Key_F13", Qt::Key_F13, "@brief Enum constant Qt::Key_F13") +
    gsi::enum_const ("Key_F14", Qt::Key_F14, "@brief Enum constant Qt::Key_F14") +
    gsi::enum_const ("Key_F15", Qt::Key_F15, "@brief Enum constant Qt::Key_F15") +
    gsi::enum_const ("Key_F16", Qt::Key_F16, "@brief Enum constant Qt::Key_F16") +
    gsi::enum_const ("Key_F17", Qt::Key_F17, "@brief Enum constant Qt::Key_F17") +
    gsi::enum_const ("Key_F18", Qt::Key_F18, "@brief Enum constant Qt::Key_F18") +
    gsi::enum_const ("Key_F19", Qt::Key_F19, "@brief Enum constant Qt::Key_F19") +
    gsi::enum_const ("Key_F20", Qt::Key_F20, "@brief Enum constant Qt::Key_F20") +
    gsi::enum_const ("Key_F21", Qt::Key_F21, "@brief Enum constant Qt::Key_F21") +
    gsi::enum_const ("Key_F22", Qt::Key_F22, "@brief Enum constant Qt::Key_F22") +
    gsi::enum_const ("Key_F23", Qt::Key_F23, "@brief Enum constant Qt::Key_F23") +
    gsi::enum_const ("Key_F24", Qt::Key_F24, "@brief Enum constant Qt::Key_F24") +
    gsi::enum_const ("Key_F25", Qt::Key_F25, "@brief Enum constant Qt::Key_F25") +
    gsi::enum_const ("Key_F26", Qt::Key_F26, "@brief Enum constant Qt::Key_F26") +
    gsi::enum_const ("Key_F27", Qt::Key_F27, "@brief Enum constant Qt::Key_F27") +
    gsi::enum_const ("Key_F28", Qt::Key_F28, "@brief Enum constant Qt::Key_F28") +
    gsi::enum_const ("Key_F29", Qt::Key_F29, "@brief Enum constant Qt::Key_F29") +
    gsi::enum_const ("Key_F30", Qt::Key_F30, "@brief Enum constant Qt::Key_F30") +
    gsi::enum_const ("Key_F31", Qt::Key_F31, "@brief Enum constant Qt::Key_F31") +
    gsi::enum_const ("Key_F32", Qt::Key_F32, "@brief Enum constant Qt::Key_F32") +
    gsi::enum_const ("Key_F33", Qt::Key_F33, "@brief Enum constant Qt::Key_F33") +
    gsi::enum_const ("Key_F34", Qt::Key_F34, "@brief Enum constant Qt::Key_F34") +
    gsi::enum_const ("Key_F35", Qt::Key_F35, "@brief Enum constant Qt::Key_F35") +
    gsi::enum_const ("Key_Super_L", Qt::Key_Super_L, "@brief Enum constant Qt::Key_Super_L") +
    gsi::enum_const ("Key_Super_R", Qt::Key_Super_R, "@brief Enum constant Qt::Key_Super_R") +
    gsi::enum_const ("Key_Menu", Qt::Key_Menu, "@brief Enum constant Qt::Key_Menu") +
    gsi::enum_const ("Key_Hyper_L", Qt::Key_Hyper_L, "@brief Enum constant Qt::Key_Hyper_L") +
    gsi::enum_const ("Key_Hyper_R", Qt::Key_Hyper_R, "@brief Enum constant Qt::Key_Hyper_R") +
    gsi::enum_const ("Key_Help", Qt::Key_Help, "@brief Enum constant Qt::Key_Help") +
    gsi::enum_const ("Key_Direction_L", Qt::Key_Direction_L, "@brief Enum constant Qt::Key_Direction_L") +
    gsi::enum_const ("Key_Direction_R", Qt::Key_Direction_R, "@brief Enum constant Qt::Key_Direction_R") +
    gsi::enum_const ("Key_Space", Qt::Key_Space, "@brief Enum constant Qt::Key_Space") +
    gsi::enum_const ("Key_Any", Qt::Key_Any, "@brief Enum constant Qt::Key_Any") +
    gsi::enum_const ("Key_Exclam", Qt::Key_Exclam, "@brief Enum constant Qt::Key_Exclam") +
    gsi::enum_const ("Key_QuoteDbl", Qt::Key_QuoteDbl, "@brief Enum constant Qt::Key_QuoteDbl") +
    gsi::enum_const ("Key_NumberSign", Qt::Key_NumberSign, "@brief Enum constant Qt::Key_NumberSign") +
    gsi::enum_const ("Key_Dollar", Qt::Key_Dollar, "@brief Enum constant Qt::Key_Dollar") +
    gsi::enum_const ("Key_Percent", Qt::Key_Percent, "@brief Enum constant Qt::Key_Percent") +
    gsi::enum_const ("Key_Ampersand", Qt::Key_Ampersand, "@brief Enum constant Qt::Key_Ampersand") +
    gsi::enum_const ("Key_Apostrophe", Qt::Key_Apostrophe, "@brief Enum constant Qt::Key_Apostrophe") +
    gsi::enum_const ("Key_ParenLeft", Qt::Key_ParenLeft, "@brief Enum constant Qt::Key_ParenLeft") +
    gsi::enum_const ("Key_ParenRight", Qt::Key_ParenRight, "@brief Enum constant Qt::Key_ParenRight") +
    gsi::enum_const ("Key_Asterisk", Qt::Key_Asterisk, "@brief Enum constant Qt::Key_Asterisk") +
    gsi::enum_const ("Key_Plus", Qt::Key_Plus, "@brief Enum constant Qt::Key_Plus") +
    gsi::enum_const ("Key_Comma", Qt::Key_Comma, "@brief Enum constant Qt::Key_Comma") +
    gsi::enum_const ("Key_Minus", Qt::Key_Minus, "@brief Enum constant Qt::Key_Minus") +
    gsi::enum_const ("Key_Period", Qt::Key_Period, "@brief Enum constant Qt::Key_Period") +
    gsi::enum_const ("Key_Slash", Qt::Key_Slash, "@brief Enum constant Qt::Key_Slash") +
    gsi::enum_const ("Key_0", Qt::Key_0, "@brief Enum constant Qt::Key_0") +
    gsi::enum_const ("Key_1", Qt::Key_1, "@brief Enum constant Qt::Key_1") +
    gsi::enum_const ("Key_2", Qt::Key_2, "@brief Enum constant Qt::Key_2") +
    gsi::enum_const ("Key_3", Qt::Key_3, "@brief Enum constant Qt::Key_3") +
    gsi::enum_const ("Key_4", Qt::Key_4, "@brief Enum constant Qt::Key_4") +
    gsi::enum_const ("Key_5", Qt::Key_5, "@brief Enum constant Qt::Key_5") +
    gsi::enum_const ("Key_6", Qt::Key_6, "@brief Enum constant Qt::Key_6") +
    gsi::enum_const ("Key_7", Qt::Key_7, "@brief Enum constant Qt::Key_7") +
    gsi::enum_const ("Key_8", Qt::Key_8, "@brief Enum constant Qt::Key_8") +
    gsi::enum_const ("Key_9", Qt::Key_9, "@brief Enum constant Qt::Key_9") +
    gsi::enum_const ("Key_Colon", Qt::Key_Colon, "@brief Enum constant Qt::Key_Colon") +
    gsi::enum_const ("Key_Semicolon", Qt::Key_Semicolon, "@brief Enum constant Qt::Key_Semicolon") +
    gsi::enum_const ("Key_Less", Qt::Key_Less, "@brief Enum constant Qt::Key_Less") +
    gsi::enum_const ("Key_Equal", Qt::Key_Equal, "@brief Enum constant Qt::Key_Equal") +
    gsi::enum_const ("Key_Greater", Qt::Key_Greater, "@brief Enum constant Qt::Key_Greater") +
    gsi::enum_const ("Key_Question", Qt::Key_Question, "@brief Enum constant Qt::Key_Question") +
    gsi::enum_const ("Key_At", Qt::Key_At, "@brief Enum constant Qt::Key_At") +
    gsi::enum_const ("Key_A", Qt::Key_A, "@brief Enum constant Qt::Key_A") +
    gsi::enum_const ("Key_B", Qt::Key_B, "@brief Enum constant Qt::Key_B") +
    gsi::enum_const ("Key_C", Qt::Key_C, "@brief Enum constant Qt::Key_C") +
    gsi::enum_const ("Key_D", Qt::Key_D, "@brief Enum constant Qt::Key_D") +
    gsi::enum_const ("Key_E", Qt::Key_E, "@brief Enum constant Qt::Key_E") +
    gsi::enum_const ("Key_F", Qt::Key_F, "@brief Enum constant Qt::Key_F") +
    gsi::enum_const ("Key_G", Qt::Key_G, "@brief Enum constant Qt::Key_G") +
    gsi::enum_const ("Key_H", Qt::Key_H, "@brief Enum constant Qt::Key_H") +
    gsi::enum_const ("Key_I", Qt::Key_I, "@brief Enum constant Qt::Key_I") +
    gsi::enum_const ("Key_J", Qt::Key_J, "@brief Enum constant Qt::Key_J") +
    gsi::enum_const ("Key_K", Qt::Key_K, "@brief Enum constant Qt::Key_K") +
    gsi::enum_const ("Key_L", Qt::Key_L, "@brief Enum constant Qt::Key_L") +
    gsi::enum_const ("Key_M", Qt::Key_M, "@brief Enum constant Qt::Key_M") +
    gsi::enum_const ("Key_N", Qt::Key_N, "@brief Enum constant Qt::Key_N") +
    gsi::enum_const ("Key_O", Qt::Key_O, "@brief Enum constant Qt::Key_O") +
    gsi::enum_const ("Key_P", Qt::Key_P, "@brief Enum constant Qt::Key_P") +
    gsi::enum_const ("Key_Q", Qt::Key_Q, "@brief Enum constant Qt::Key_Q") +
    gsi::enum_const ("Key_R", Qt::Key_R, "@brief Enum constant Qt::Key_R") +
    gsi::enum_const ("Key_S", Qt::Key_S, "@brief Enum constant Qt::Key_S") +
    gsi::enum_const ("Key_T", Qt::Key_T, "@brief Enum constant Qt::Key_T") +
    gsi::enum_const ("Key_U", Qt::Key_U, "@brief Enum constant Qt::Key_U") +
    gsi::enum_const ("Key_V", Qt::Key_V, "@brief Enum constant Qt::Key_V") +
    gsi::enum_const ("Key_W", Qt::Key_W, "@brief Enum constant Qt::Key_W") +
    gsi::enum_const ("Key_X", Qt::Key_X, "@brief Enum constant Qt::Key_X") +
    gsi::enum_const ("Key_Y", Qt::Key_Y, "@brief Enum constant Qt::Key_Y") +
    gsi::enum_const ("Key_Z", Qt::Key_Z, "@brief Enum constant Qt::Key_Z") +
    gsi::enum_const ("Key_BracketLeft", Qt::Key_BracketLeft, "@brief Enum constant Qt::Key_BracketLeft") +
    gsi::enum_const ("Key_Backslash", Qt::Key_Backslash, "@brief Enum constant Qt::Key_Backslash") +
    gsi::enum_const ("Key_BracketRight", Qt::Key_BracketRight, "@brief Enum constant Qt::Key_BracketRight") +
    gsi::enum_const ("Key_AsciiCircum", Qt::Key_AsciiCircum, "@brief Enum constant Qt::Key_AsciiCircum") +
    gsi::enum_const ("Key_Underscore", Qt::Key_Underscore, "@brief Enum constant Qt::Key_Underscore") +
    gsi::enum_const ("Key_QuoteLeft", Qt::Key_QuoteLeft, "@brief Enum constant Qt::Key_QuoteLeft") +
    gsi::enum_const ("Key_BraceLeft", Qt::Key_BraceLeft, "@brief Enum constant Qt::Key_BraceLeft") +
    gsi::enum_const ("Key_Bar", Qt::Key_Bar, "@brief Enum constant Qt::Key_Bar") +
    gsi::enum_const ("Key_BraceRight", Qt::Key_BraceRight, "@brief Enum constant Qt::Key_BraceRight") +
    gsi::enum_const ("Key_AsciiTilde", Qt::Key_AsciiTilde, "@brief Enum constant Qt::Key_AsciiTilde") +
    gsi::enum_const ("Key_nobreakspace", Qt::Key_nobreakspace, "@brief Enum constant Qt::Key_nobreakspace") +
    gsi::enum_const ("Key_exclamdown", Qt::Key_exclamdown, "@brief Enum constant Qt::Key_exclamdown") +
    gsi::enum_const ("Key_cent", Qt::Key_cent, "@brief Enum constant Qt::Key_cent") +
    gsi::enum_const ("Key_sterling", Qt::Key_sterling, "@brief Enum constant Qt::Key_sterling") +
    gsi::enum_const ("Key_currency", Qt::Key_currency, "@brief Enum constant Qt::Key_currency") +
    gsi::enum_const ("Key_yen", Qt::Key_yen, "@brief Enum constant Qt::Key_yen") +
    gsi::enum_const ("Key_brokenbar", Qt::Key_brokenbar, "@brief Enum constant Qt::Key_brokenbar") +
    gsi::enum_const ("Key_section", Qt::Key_section, "@brief Enum constant Qt::Key_section") +
    gsi::enum_const ("Key_diaeresis", Qt::Key_diaeresis, "@brief Enum constant Qt::Key_diaeresis") +
    gsi::enum_const ("Key_copyright", Qt::Key_copyright, "@brief Enum constant Qt::Key_copyright") +
    gsi::enum_const ("Key_ordfeminine", Qt::Key_ordfeminine, "@brief Enum constant Qt::Key_ordfeminine") +
    gsi::enum_const ("Key_guillemotleft", Qt::Key_guillemotleft, "@brief Enum constant Qt::Key_guillemotleft") +
    gsi::enum_const ("Key_notsign", Qt::Key_notsign, "@brief Enum constant Qt::Key_notsign") +
    gsi::enum_const ("Key_hyphen", Qt::Key_hyphen, "@brief Enum constant Qt::Key_hyphen") +
    gsi::enum_const ("Key_registered", Qt::Key_registered, "@brief Enum constant Qt::Key_registered") +
    gsi::enum_const ("Key_macron", Qt::Key_macron, "@brief Enum constant Qt::Key_macron") +
    gsi::enum_const ("Key_degree", Qt::Key_degree, "@brief Enum constant Qt::Key_degree") +
    gsi::enum_const ("Key_plusminus", Qt::Key_plusminus, "@brief Enum constant Qt::Key_plusminus") +
    gsi::enum_const ("Key_twosuperior", Qt::Key_twosuperior, "@brief Enum constant Qt::Key_twosuperior") +
    gsi::enum_const ("Key_threesuperior", Qt::Key_threesuperior, "@brief Enum constant Qt::Key_threesuperior") +
    gsi::enum_const ("Key_acute", Qt::Key_acute, "@brief Enum constant Qt::Key_acute") +
    gsi::enum_const ("Key_mu", Qt::Key_mu, "@brief Enum constant Qt::Key_mu") +
    gsi::enum_const ("Key_paragraph", Qt::Key_paragraph, "@brief Enum constant Qt::Key_paragraph") +
    gsi::enum_const ("Key_periodcentered", Qt::Key_periodcentered, "@brief Enum constant Qt::Key_periodcentered") +
    gsi::enum_const ("Key_cedilla", Qt::Key_cedilla, "@brief Enum constant Qt::Key_cedilla") +
    gsi::enum_const ("Key_onesuperior", Qt::Key_onesuperior, "@brief Enum constant Qt::Key_onesuperior") +
    gsi::enum_const ("Key_masculine", Qt::Key_masculine, "@brief Enum constant Qt::Key_masculine") +
    gsi::enum_const ("Key_guillemotright", Qt::Key_guillemotright, "@brief Enum constant Qt::Key_guillemotright") +
    gsi::enum_const ("Key_onequarter", Qt::Key_onequarter, "@brief Enum constant Qt::Key_onequarter") +
    gsi::enum_const ("Key_onehalf", Qt::Key_onehalf, "@brief Enum constant Qt::Key_onehalf") +
    gsi::enum_const ("Key_threequarters", Qt::Key_threequarters, "@brief Enum constant Qt::Key_threequarters") +
    gsi::enum_const ("Key_questiondown", Qt::Key_questiondown, "@brief Enum constant Qt::Key_questiondown") +
    gsi::enum_const ("Key_Agrave", Qt::Key_Agrave, "@brief Enum constant Qt::Key_Agrave") +
    gsi::enum_const ("Key_Aacute", Qt::Key_Aacute, "@brief Enum constant Qt::Key_Aacute") +
    gsi::enum_const ("Key_Acircumflex", Qt::Key_Acircumflex, "@brief Enum constant Qt::Key_Acircumflex") +
    gsi::enum_const ("Key_Atilde", Qt::Key_Atilde, "@brief Enum constant Qt::Key_Atilde") +
    gsi::enum_const ("Key_Adiaeresis", Qt::Key_Adiaeresis, "@brief Enum constant Qt::Key_Adiaeresis") +
    gsi::enum_const ("Key_Aring", Qt::Key_Aring, "@brief Enum constant Qt::Key_Aring") +
    gsi::enum_const ("Key_AE", Qt::Key_AE, "@brief Enum constant Qt::Key_AE") +
    gsi::enum_const ("Key_Ccedilla", Qt::Key_Ccedilla, "@brief Enum constant Qt::Key_Ccedilla") +
    gsi::enum_const ("Key_Egrave", Qt::Key_Egrave, "@brief Enum constant Qt::Key_Egrave") +
    gsi::enum_const ("Key_Eacute", Qt::Key_Eacute, "@brief Enum constant Qt::Key_Eacute") +
    gsi::enum_const ("Key_Ecircumflex", Qt::Key_Ecircumflex, "@brief Enum constant Qt::Key_Ecircumflex") +
    gsi::enum_const ("Key_Ediaeresis", Qt::Key_Ediaeresis, "@brief Enum constant Qt::Key_Ediaeresis") +
    gsi::enum_const ("Key_Igrave", Qt::Key_Igrave, "@brief Enum constant Qt::Key_Igrave") +
    gsi::enum_const ("Key_Iacute", Qt::Key_Iacute, "@brief Enum constant Qt::Key_Iacute") +
    gsi::enum_const ("Key_Icircumflex", Qt::Key_Icircumflex, "@brief Enum constant Qt::Key_Icircumflex") +
    gsi::enum_const ("Key_Idiaeresis", Qt::Key_Idiaeresis, "@brief Enum constant Qt::Key_Idiaeresis") +
    gsi::enum_const ("Key_ETH", Qt::Key_ETH, "@brief Enum constant Qt::Key_ETH") +
    gsi::enum_const ("Key_Ntilde", Qt::Key_Ntilde, "@brief Enum constant Qt::Key_Ntilde") +
    gsi::enum_const ("Key_Ograve", Qt::Key_Ograve, "@brief Enum constant Qt::Key_Ograve") +
    gsi::enum_const ("Key_Oacute", Qt::Key_Oacute, "@brief Enum constant Qt::Key_Oacute") +
    gsi::enum_const ("Key_Ocircumflex", Qt::Key_Ocircumflex, "@brief Enum constant Qt::Key_Ocircumflex") +
    gsi::enum_const ("Key_Otilde", Qt::Key_Otilde, "@brief Enum constant Qt::Key_Otilde") +
    gsi::enum_const ("Key_Odiaeresis", Qt::Key_Odiaeresis, "@brief Enum constant Qt::Key_Odiaeresis") +
    gsi::enum_const ("Key_multiply", Qt::Key_multiply, "@brief Enum constant Qt::Key_multiply") +
    gsi::enum_const ("Key_Ooblique", Qt::Key_Ooblique, "@brief Enum constant Qt::Key_Ooblique") +
    gsi::enum_const ("Key_Ugrave", Qt::Key_Ugrave, "@brief Enum constant Qt::Key_Ugrave") +
    gsi::enum_const ("Key_Uacute", Qt::Key_Uacute, "@brief Enum constant Qt::Key_Uacute") +
    gsi::enum_const ("Key_Ucircumflex", Qt::Key_Ucircumflex, "@brief Enum constant Qt::Key_Ucircumflex") +
    gsi::enum_const ("Key_Udiaeresis", Qt::Key_Udiaeresis, "@brief Enum constant Qt::Key_Udiaeresis") +
    gsi::enum_const ("Key_Yacute", Qt::Key_Yacute, "@brief Enum constant Qt::Key_Yacute") +
    gsi::enum_const ("Key_THORN", Qt::Key_THORN, "@brief Enum constant Qt::Key_THORN") +
    gsi::enum_const ("Key_ssharp", Qt::Key_ssharp, "@brief Enum constant Qt::Key_ssharp") +
    gsi::enum_const ("Key_division", Qt::Key_division, "@brief Enum constant Qt::Key_division") +
    gsi::enum_const ("Key_ydiaeresis", Qt::Key_ydiaeresis, "@brief Enum constant Qt::Key_ydiaeresis") +
    gsi::enum_const ("Key_AltGr", Qt::Key_AltGr, "@brief Enum constant Qt::Key_AltGr") +
    gsi::enum_const ("Key_Multi_key", Qt::Key_Multi_key, "@brief Enum constant Qt::Key_Multi_key") +
    gsi::enum_const ("Key_Codeinput", Qt::Key_Codeinput, "@brief Enum constant Qt::Key_Codeinput") +
    gsi::enum_const ("Key_SingleCandidate", Qt::Key_SingleCandidate, "@brief Enum constant Qt::Key_SingleCandidate") +
    gsi::enum_const ("Key_MultipleCandidate", Qt::Key_MultipleCandidate, "@brief Enum constant Qt::Key_MultipleCandidate") +
    gsi::enum_const ("Key_PreviousCandidate", Qt::Key_PreviousCandidate, "@brief Enum constant Qt::Key_PreviousCandidate") +
    gsi::enum_const ("Key_Mode_switch", Qt::Key_Mode_switch, "@brief Enum constant Qt::Key_Mode_switch") +
    gsi::enum_const ("Key_Kanji", Qt::Key_Kanji, "@brief Enum constant Qt::Key_Kanji") +
    gsi::enum_const ("Key_Muhenkan", Qt::Key_Muhenkan, "@brief Enum constant Qt::Key_Muhenkan") +
    gsi::enum_const ("Key_Henkan", Qt::Key_Henkan, "@brief Enum constant Qt::Key_Henkan") +
    gsi::enum_const ("Key_Romaji", Qt::Key_Romaji, "@brief Enum constant Qt::Key_Romaji") +
    gsi::enum_const ("Key_Hiragana", Qt::Key_Hiragana, "@brief Enum constant Qt::Key_Hiragana") +
    gsi::enum_const ("Key_Katakana", Qt::Key_Katakana, "@brief Enum constant Qt::Key_Katakana") +
    gsi::enum_const ("Key_Hiragana_Katakana", Qt::Key_Hiragana_Katakana, "@brief Enum constant Qt::Key_Hiragana_Katakana") +
    gsi::enum_const ("Key_Zenkaku", Qt::Key_Zenkaku, "@brief Enum constant Qt::Key_Zenkaku") +
    gsi::enum_const ("Key_Hankaku", Qt::Key_Hankaku, "@brief Enum constant Qt::Key_Hankaku") +
    gsi::enum_const ("Key_Zenkaku_Hankaku", Qt::Key_Zenkaku_Hankaku, "@brief Enum constant Qt::Key_Zenkaku_Hankaku") +
    gsi::enum_const ("Key_Touroku", Qt::Key_Touroku, "@brief Enum constant Qt::Key_Touroku") +
    gsi::enum_const ("Key_Massyo", Qt::Key_Massyo, "@brief Enum constant Qt::Key_Massyo") +
    gsi::enum_const ("Key_Kana_Lock", Qt::Key_Kana_Lock, "@brief Enum constant Qt::Key_Kana_Lock") +
    gsi::enum_const ("Key_Kana_Shift", Qt::Key_Kana_Shift, "@brief Enum constant Qt::Key_Kana_Shift") +
    gsi::enum_const ("Key_Eisu_Shift", Qt::Key_Eisu_Shift, "@brief Enum constant Qt::Key_Eisu_Shift") +
    gsi::enum_const ("Key_Eisu_toggle", Qt::Key_Eisu_toggle, "@brief Enum constant Qt::Key_Eisu_toggle") +
    gsi::enum_const ("Key_Hangul", Qt::Key_Hangul, "@brief Enum constant Qt::Key_Hangul") +
    gsi::enum_const ("Key_Hangul_Start", Qt::Key_Hangul_Start, "@brief Enum constant Qt::Key_Hangul_Start") +
    gsi::enum_const ("Key_Hangul_End", Qt::Key_Hangul_End, "@brief Enum constant Qt::Key_Hangul_End") +
    gsi::enum_const ("Key_Hangul_Hanja", Qt::Key_Hangul_Hanja, "@brief Enum constant Qt::Key_Hangul_Hanja") +
    gsi::enum_const ("Key_Hangul_Jamo", Qt::Key_Hangul_Jamo, "@brief Enum constant Qt::Key_Hangul_Jamo") +
    gsi::enum_const ("Key_Hangul_Romaja", Qt::Key_Hangul_Romaja, "@brief Enum constant Qt::Key_Hangul_Romaja") +
    gsi::enum_const ("Key_Hangul_Jeonja", Qt::Key_Hangul_Jeonja, "@brief Enum constant Qt::Key_Hangul_Jeonja") +
    gsi::enum_const ("Key_Hangul_Banja", Qt::Key_Hangul_Banja, "@brief Enum constant Qt::Key_Hangul_Banja") +
    gsi::enum_const ("Key_Hangul_PreHanja", Qt::Key_Hangul_PreHanja, "@brief Enum constant Qt::Key_Hangul_PreHanja") +
    gsi::enum_const ("Key_Hangul_PostHanja", Qt::Key_Hangul_PostHanja, "@brief Enum constant Qt::Key_Hangul_PostHanja") +
    gsi::enum_const ("Key_Hangul_Special", Qt::Key_Hangul_Special, "@brief Enum constant Qt::Key_Hangul_Special") +
    gsi::enum_const ("Key_Dead_Grave", Qt::Key_Dead_Grave, "@brief Enum constant Qt::Key_Dead_Grave") +
    gsi::enum_const ("Key_Dead_Acute", Qt::Key_Dead_Acute, "@brief Enum constant Qt::Key_Dead_Acute") +
    gsi::enum_const ("Key_Dead_Circumflex", Qt::Key_Dead_Circumflex, "@brief Enum constant Qt::Key_Dead_Circumflex") +
    gsi::enum_const ("Key_Dead_Tilde", Qt::Key_Dead_Tilde, "@brief Enum constant Qt::Key_Dead_Tilde") +
    gsi::enum_const ("Key_Dead_Macron", Qt::Key_Dead_Macron, "@brief Enum constant Qt::Key_Dead_Macron") +
    gsi::enum_const ("Key_Dead_Breve", Qt::Key_Dead_Breve, "@brief Enum constant Qt::Key_Dead_Breve") +
    gsi::enum_const ("Key_Dead_Abovedot", Qt::Key_Dead_Abovedot, "@brief Enum constant Qt::Key_Dead_Abovedot") +
    gsi::enum_const ("Key_Dead_Diaeresis", Qt::Key_Dead_Diaeresis, "@brief Enum constant Qt::Key_Dead_Diaeresis") +
    gsi::enum_const ("Key_Dead_Abovering", Qt::Key_Dead_Abovering, "@brief Enum constant Qt::Key_Dead_Abovering") +
    gsi::enum_const ("Key_Dead_Doubleacute", Qt::Key_Dead_Doubleacute, "@brief Enum constant Qt::Key_Dead_Doubleacute") +
    gsi::enum_const ("Key_Dead_Caron", Qt::Key_Dead_Caron, "@brief Enum constant Qt::Key_Dead_Caron") +
    gsi::enum_const ("Key_Dead_Cedilla", Qt::Key_Dead_Cedilla, "@brief Enum constant Qt::Key_Dead_Cedilla") +
    gsi::enum_const ("Key_Dead_Ogonek", Qt::Key_Dead_Ogonek, "@brief Enum constant Qt::Key_Dead_Ogonek") +
    gsi::enum_const ("Key_Dead_Iota", Qt::Key_Dead_Iota, "@brief Enum constant Qt::Key_Dead_Iota") +
    gsi::enum_const ("Key_Dead_Voiced_Sound", Qt::Key_Dead_Voiced_Sound, "@brief Enum constant Qt::Key_Dead_Voiced_Sound") +
    gsi::enum_const ("Key_Dead_Semivoiced_Sound", Qt::Key_Dead_Semivoiced_Sound, "@brief Enum constant Qt::Key_Dead_Semivoiced_Sound") +
    gsi::enum_const ("Key_Dead_Belowdot", Qt::Key_Dead_Belowdot, "@brief Enum constant Qt::Key_Dead_Belowdot") +
    gsi::enum_const ("Key_Dead_Hook", Qt::Key_Dead_Hook, "@brief Enum constant Qt::Key_Dead_Hook") +
    gsi::enum_const ("Key_Dead_Horn", Qt::Key_Dead_Horn, "@brief Enum constant Qt::Key_Dead_Horn") +
    gsi::enum_const ("Key_Back", Qt::Key_Back, "@brief Enum constant Qt::Key_Back") +
    gsi::enum_const ("Key_Forward", Qt::Key_Forward, "@brief Enum constant Qt::Key_Forward") +
    gsi::enum_const ("Key_Stop", Qt::Key_Stop, "@brief Enum constant Qt::Key_Stop") +
    gsi::enum_const ("Key_Refresh", Qt::Key_Refresh, "@brief Enum constant Qt::Key_Refresh") +
    gsi::enum_const ("Key_VolumeDown", Qt::Key_VolumeDown, "@brief Enum constant Qt::Key_VolumeDown") +
    gsi::enum_const ("Key_VolumeMute", Qt::Key_VolumeMute, "@brief Enum constant Qt::Key_VolumeMute") +
    gsi::enum_const ("Key_VolumeUp", Qt::Key_VolumeUp, "@brief Enum constant Qt::Key_VolumeUp") +
    gsi::enum_const ("Key_BassBoost", Qt::Key_BassBoost, "@brief Enum constant Qt::Key_BassBoost") +
    gsi::enum_const ("Key_BassUp", Qt::Key_BassUp, "@brief Enum constant Qt::Key_BassUp") +
    gsi::enum_const ("Key_BassDown", Qt::Key_BassDown, "@brief Enum constant Qt::Key_BassDown") +
    gsi::enum_const ("Key_TrebleUp", Qt::Key_TrebleUp, "@brief Enum constant Qt::Key_TrebleUp") +
    gsi::enum_const ("Key_TrebleDown", Qt::Key_TrebleDown, "@brief Enum constant Qt::Key_TrebleDown") +
    gsi::enum_const ("Key_MediaPlay", Qt::Key_MediaPlay, "@brief Enum constant Qt::Key_MediaPlay") +
    gsi::enum_const ("Key_MediaStop", Qt::Key_MediaStop, "@brief Enum constant Qt::Key_MediaStop") +
    gsi::enum_const ("Key_MediaPrevious", Qt::Key_MediaPrevious, "@brief Enum constant Qt::Key_MediaPrevious") +
    gsi::enum_const ("Key_MediaNext", Qt::Key_MediaNext, "@brief Enum constant Qt::Key_MediaNext") +
    gsi::enum_const ("Key_MediaRecord", Qt::Key_MediaRecord, "@brief Enum constant Qt::Key_MediaRecord") +
    gsi::enum_const ("Key_HomePage", Qt::Key_HomePage, "@brief Enum constant Qt::Key_HomePage") +
    gsi::enum_const ("Key_Favorites", Qt::Key_Favorites, "@brief Enum constant Qt::Key_Favorites") +
    gsi::enum_const ("Key_Search", Qt::Key_Search, "@brief Enum constant Qt::Key_Search") +
    gsi::enum_const ("Key_Standby", Qt::Key_Standby, "@brief Enum constant Qt::Key_Standby") +
    gsi::enum_const ("Key_OpenUrl", Qt::Key_OpenUrl, "@brief Enum constant Qt::Key_OpenUrl") +
    gsi::enum_const ("Key_LaunchMail", Qt::Key_LaunchMail, "@brief Enum constant Qt::Key_LaunchMail") +
    gsi::enum_const ("Key_LaunchMedia", Qt::Key_LaunchMedia, "@brief Enum constant Qt::Key_LaunchMedia") +
    gsi::enum_const ("Key_Launch0", Qt::Key_Launch0, "@brief Enum constant Qt::Key_Launch0") +
    gsi::enum_const ("Key_Launch1", Qt::Key_Launch1, "@brief Enum constant Qt::Key_Launch1") +
    gsi::enum_const ("Key_Launch2", Qt::Key_Launch2, "@brief Enum constant Qt::Key_Launch2") +
    gsi::enum_const ("Key_Launch3", Qt::Key_Launch3, "@brief Enum constant Qt::Key_Launch3") +
    gsi::enum_const ("Key_Launch4", Qt::Key_Launch4, "@brief Enum constant Qt::Key_Launch4") +
    gsi::enum_const ("Key_Launch5", Qt::Key_Launch5, "@brief Enum constant Qt::Key_Launch5") +
    gsi::enum_const ("Key_Launch6", Qt::Key_Launch6, "@brief Enum constant Qt::Key_Launch6") +
    gsi::enum_const ("Key_Launch7", Qt::Key_Launch7, "@brief Enum constant Qt::Key_Launch7") +
    gsi::enum_const ("Key_Launch8", Qt::Key_Launch8, "@brief Enum constant Qt::Key_Launch8") +
    gsi::enum_const ("Key_Launch9", Qt::Key_Launch9, "@brief Enum constant Qt::Key_Launch9") +
    gsi::enum_const ("Key_LaunchA", Qt::Key_LaunchA, "@brief Enum constant Qt::Key_LaunchA") +
    gsi::enum_const ("Key_LaunchB", Qt::Key_LaunchB, "@brief Enum constant Qt::Key_LaunchB") +
    gsi::enum_const ("Key_LaunchC", Qt::Key_LaunchC, "@brief Enum constant Qt::Key_LaunchC") +
    gsi::enum_const ("Key_LaunchD", Qt::Key_LaunchD, "@brief Enum constant Qt::Key_LaunchD") +
    gsi::enum_const ("Key_LaunchE", Qt::Key_LaunchE, "@brief Enum constant Qt::Key_LaunchE") +
    gsi::enum_const ("Key_LaunchF", Qt::Key_LaunchF, "@brief Enum constant Qt::Key_LaunchF") +
    gsi::enum_const ("Key_MonBrightnessUp", Qt::Key_MonBrightnessUp, "@brief Enum constant Qt::Key_MonBrightnessUp") +
    gsi::enum_const ("Key_MonBrightnessDown", Qt::Key_MonBrightnessDown, "@brief Enum constant Qt::Key_MonBrightnessDown") +
    gsi::enum_const ("Key_KeyboardLightOnOff", Qt::Key_KeyboardLightOnOff, "@brief Enum constant Qt::Key_KeyboardLightOnOff") +
    gsi::enum_const ("Key_KeyboardBrightnessUp", Qt::Key_KeyboardBrightnessUp, "@brief Enum constant Qt::Key_KeyboardBrightnessUp") +
    gsi::enum_const ("Key_KeyboardBrightnessDown", Qt::Key_KeyboardBrightnessDown, "@brief Enum constant Qt::Key_KeyboardBrightnessDown") +
    gsi::enum_const ("Key_PowerOff", Qt::Key_PowerOff, "@brief Enum constant Qt::Key_PowerOff") +
    gsi::enum_const ("Key_WakeUp", Qt::Key_WakeUp, "@brief Enum constant Qt::Key_WakeUp") +
    gsi::enum_const ("Key_Eject", Qt::Key_Eject, "@brief Enum constant Qt::Key_Eject") +
    gsi::enum_const ("Key_ScreenSaver", Qt::Key_ScreenSaver, "@brief Enum constant Qt::Key_ScreenSaver") +
    gsi::enum_const ("Key_WWW", Qt::Key_WWW, "@brief Enum constant Qt::Key_WWW") +
    gsi::enum_const ("Key_Memo", Qt::Key_Memo, "@brief Enum constant Qt::Key_Memo") +
    gsi::enum_const ("Key_LightBulb", Qt::Key_LightBulb, "@brief Enum constant Qt::Key_LightBulb") +
    gsi::enum_const ("Key_Shop", Qt::Key_Shop, "@brief Enum constant Qt::Key_Shop") +
    gsi::enum_const ("Key_History", Qt::Key_History, "@brief Enum constant Qt::Key_History") +
    gsi::enum_const ("Key_AddFavorite", Qt::Key_AddFavorite, "@brief Enum constant Qt::Key_AddFavorite") +
    gsi::enum_const ("Key_HotLinks", Qt::Key_HotLinks, "@brief Enum constant Qt::Key_HotLinks") +
    gsi::enum_const ("Key_BrightnessAdjust", Qt::Key_BrightnessAdjust, "@brief Enum constant Qt::Key_BrightnessAdjust") +
    gsi::enum_const ("Key_Finance", Qt::Key_Finance, "@brief Enum constant Qt::Key_Finance") +
    gsi::enum_const ("Key_Community", Qt::Key_Community, "@brief Enum constant Qt::Key_Community") +
    gsi::enum_const ("Key_AudioRewind", Qt::Key_AudioRewind, "@brief Enum constant Qt::Key_AudioRewind") +
    gsi::enum_const ("Key_BackForward", Qt::Key_BackForward, "@brief Enum constant Qt::Key_BackForward") +
    gsi::enum_const ("Key_ApplicationLeft", Qt::Key_ApplicationLeft, "@brief Enum constant Qt::Key_ApplicationLeft") +
    gsi::enum_const ("Key_ApplicationRight", Qt::Key_ApplicationRight, "@brief Enum constant Qt::Key_ApplicationRight") +
    gsi::enum_const ("Key_Book", Qt::Key_Book, "@brief Enum constant Qt::Key_Book") +
    gsi::enum_const ("Key_CD", Qt::Key_CD, "@brief Enum constant Qt::Key_CD") +
    gsi::enum_const ("Key_Calculator", Qt::Key_Calculator, "@brief Enum constant Qt::Key_Calculator") +
    gsi::enum_const ("Key_ToDoList", Qt::Key_ToDoList, "@brief Enum constant Qt::Key_ToDoList") +
    gsi::enum_const ("Key_ClearGrab", Qt::Key_ClearGrab, "@brief Enum constant Qt::Key_ClearGrab") +
    gsi::enum_const ("Key_Close", Qt::Key_Close, "@brief Enum constant Qt::Key_Close") +
    gsi::enum_const ("Key_Copy", Qt::Key_Copy, "@brief Enum constant Qt::Key_Copy") +
    gsi::enum_const ("Key_Cut", Qt::Key_Cut, "@brief Enum constant Qt::Key_Cut") +
    gsi::enum_const ("Key_Display", Qt::Key_Display, "@brief Enum constant Qt::Key_Display") +
    gsi::enum_const ("Key_DOS", Qt::Key_DOS, "@brief Enum constant Qt::Key_DOS") +
    gsi::enum_const ("Key_Documents", Qt::Key_Documents, "@brief Enum constant Qt::Key_Documents") +
    gsi::enum_const ("Key_Excel", Qt::Key_Excel, "@brief Enum constant Qt::Key_Excel") +
    gsi::enum_const ("Key_Explorer", Qt::Key_Explorer, "@brief Enum constant Qt::Key_Explorer") +
    gsi::enum_const ("Key_Game", Qt::Key_Game, "@brief Enum constant Qt::Key_Game") +
    gsi::enum_const ("Key_Go", Qt::Key_Go, "@brief Enum constant Qt::Key_Go") +
    gsi::enum_const ("Key_iTouch", Qt::Key_iTouch, "@brief Enum constant Qt::Key_iTouch") +
    gsi::enum_const ("Key_LogOff", Qt::Key_LogOff, "@brief Enum constant Qt::Key_LogOff") +
    gsi::enum_const ("Key_Market", Qt::Key_Market, "@brief Enum constant Qt::Key_Market") +
    gsi::enum_const ("Key_Meeting", Qt::Key_Meeting, "@brief Enum constant Qt::Key_Meeting") +
    gsi::enum_const ("Key_MenuKB", Qt::Key_MenuKB, "@brief Enum constant Qt::Key_MenuKB") +
    gsi::enum_const ("Key_MenuPB", Qt::Key_MenuPB, "@brief Enum constant Qt::Key_MenuPB") +
    gsi::enum_const ("Key_MySites", Qt::Key_MySites, "@brief Enum constant Qt::Key_MySites") +
    gsi::enum_const ("Key_News", Qt::Key_News, "@brief Enum constant Qt::Key_News") +
    gsi::enum_const ("Key_OfficeHome", Qt::Key_OfficeHome, "@brief Enum constant Qt::Key_OfficeHome") +
    gsi::enum_const ("Key_Option", Qt::Key_Option, "@brief Enum constant Qt::Key_Option") +
    gsi::enum_const ("Key_Paste", Qt::Key_Paste, "@brief Enum constant Qt::Key_Paste") +
    gsi::enum_const ("Key_Phone", Qt::Key_Phone, "@brief Enum constant Qt::Key_Phone") +
    gsi::enum_const ("Key_Calendar", Qt::Key_Calendar, "@brief Enum constant Qt::Key_Calendar") +
    gsi::enum_const ("Key_Reply", Qt::Key_Reply, "@brief Enum constant Qt::Key_Reply") +
    gsi::enum_const ("Key_Reload", Qt::Key_Reload, "@brief Enum constant Qt::Key_Reload") +
    gsi::enum_const ("Key_RotateWindows", Qt::Key_RotateWindows, "@brief Enum constant Qt::Key_RotateWindows") +
    gsi::enum_const ("Key_RotationPB", Qt::Key_RotationPB, "@brief Enum constant Qt::Key_RotationPB") +
    gsi::enum_const ("Key_RotationKB", Qt::Key_RotationKB, "@brief Enum constant Qt::Key_RotationKB") +
    gsi::enum_const ("Key_Save", Qt::Key_Save, "@brief Enum constant Qt::Key_Save") +
    gsi::enum_const ("Key_Send", Qt::Key_Send, "@brief Enum constant Qt::Key_Send") +
    gsi::enum_const ("Key_Spell", Qt::Key_Spell, "@brief Enum constant Qt::Key_Spell") +
    gsi::enum_const ("Key_SplitScreen", Qt::Key_SplitScreen, "@brief Enum constant Qt::Key_SplitScreen") +
    gsi::enum_const ("Key_Support", Qt::Key_Support, "@brief Enum constant Qt::Key_Support") +
    gsi::enum_const ("Key_TaskPane", Qt::Key_TaskPane, "@brief Enum constant Qt::Key_TaskPane") +
    gsi::enum_const ("Key_Terminal", Qt::Key_Terminal, "@brief Enum constant Qt::Key_Terminal") +
    gsi::enum_const ("Key_Tools", Qt::Key_Tools, "@brief Enum constant Qt::Key_Tools") +
    gsi::enum_const ("Key_Travel", Qt::Key_Travel, "@brief Enum constant Qt::Key_Travel") +
    gsi::enum_const ("Key_Video", Qt::Key_Video, "@brief Enum constant Qt::Key_Video") +
    gsi::enum_const ("Key_Word", Qt::Key_Word, "@brief Enum constant Qt::Key_Word") +
    gsi::enum_const ("Key_Xfer", Qt::Key_Xfer, "@brief Enum constant Qt::Key_Xfer") +
    gsi::enum_const ("Key_ZoomIn", Qt::Key_ZoomIn, "@brief Enum constant Qt::Key_ZoomIn") +
    gsi::enum_const ("Key_ZoomOut", Qt::Key_ZoomOut, "@brief Enum constant Qt::Key_ZoomOut") +
    gsi::enum_const ("Key_Away", Qt::Key_Away, "@brief Enum constant Qt::Key_Away") +
    gsi::enum_const ("Key_Messenger", Qt::Key_Messenger, "@brief Enum constant Qt::Key_Messenger") +
    gsi::enum_const ("Key_WebCam", Qt::Key_WebCam, "@brief Enum constant Qt::Key_WebCam") +
    gsi::enum_const ("Key_MailForward", Qt::Key_MailForward, "@brief Enum constant Qt::Key_MailForward") +
    gsi::enum_const ("Key_Pictures", Qt::Key_Pictures, "@brief Enum constant Qt::Key_Pictures") +
    gsi::enum_const ("Key_Music", Qt::Key_Music, "@brief Enum constant Qt::Key_Music") +
    gsi::enum_const ("Key_Battery", Qt::Key_Battery, "@brief Enum constant Qt::Key_Battery") +
    gsi::enum_const ("Key_Bluetooth", Qt::Key_Bluetooth, "@brief Enum constant Qt::Key_Bluetooth") +
    gsi::enum_const ("Key_WLAN", Qt::Key_WLAN, "@brief Enum constant Qt::Key_WLAN") +
    gsi::enum_const ("Key_UWB", Qt::Key_UWB, "@brief Enum constant Qt::Key_UWB") +
    gsi::enum_const ("Key_AudioForward", Qt::Key_AudioForward, "@brief Enum constant Qt::Key_AudioForward") +
    gsi::enum_const ("Key_AudioRepeat", Qt::Key_AudioRepeat, "@brief Enum constant Qt::Key_AudioRepeat") +
    gsi::enum_const ("Key_AudioRandomPlay", Qt::Key_AudioRandomPlay, "@brief Enum constant Qt::Key_AudioRandomPlay") +
    gsi::enum_const ("Key_Subtitle", Qt::Key_Subtitle, "@brief Enum constant Qt::Key_Subtitle") +
    gsi::enum_const ("Key_AudioCycleTrack", Qt::Key_AudioCycleTrack, "@brief Enum constant Qt::Key_AudioCycleTrack") +
    gsi::enum_const ("Key_Time", Qt::Key_Time, "@brief Enum constant Qt::Key_Time") +
    gsi::enum_const ("Key_Hibernate", Qt::Key_Hibernate, "@brief Enum constant Qt::Key_Hibernate") +
    gsi::enum_const ("Key_View", Qt::Key_View, "@brief Enum constant Qt::Key_View") +
    gsi::enum_const ("Key_TopMenu", Qt::Key_TopMenu, "@brief Enum constant Qt::Key_TopMenu") +
    gsi::enum_const ("Key_PowerDown", Qt::Key_PowerDown, "@brief Enum constant Qt::Key_PowerDown") +
    gsi::enum_const ("Key_Suspend", Qt::Key_Suspend, "@brief Enum constant Qt::Key_Suspend") +
    gsi::enum_const ("Key_ContrastAdjust", Qt::Key_ContrastAdjust, "@brief Enum constant Qt::Key_ContrastAdjust") +
    gsi::enum_const ("Key_MediaLast", Qt::Key_MediaLast, "@brief Enum constant Qt::Key_MediaLast") +
    gsi::enum_const ("Key_Select", Qt::Key_Select, "@brief Enum constant Qt::Key_Select") +
    gsi::enum_const ("Key_Yes", Qt::Key_Yes, "@brief Enum constant Qt::Key_Yes") +
    gsi::enum_const ("Key_No", Qt::Key_No, "@brief Enum constant Qt::Key_No") +
    gsi::enum_const ("Key_Cancel", Qt::Key_Cancel, "@brief Enum constant Qt::Key_Cancel") +
    gsi::enum_const ("Key_Printer", Qt::Key_Printer, "@brief Enum constant Qt::Key_Printer") +
    gsi::enum_const ("Key_Execute", Qt::Key_Execute, "@brief Enum constant Qt::Key_Execute") +
    gsi::enum_const ("Key_Sleep", Qt::Key_Sleep, "@brief Enum constant Qt::Key_Sleep") +
    gsi::enum_const ("Key_Play", Qt::Key_Play, "@brief Enum constant Qt::Key_Play") +
    gsi::enum_const ("Key_Zoom", Qt::Key_Zoom, "@brief Enum constant Qt::Key_Zoom") +
    gsi::enum_const ("Key_Context1", Qt::Key_Context1, "@brief Enum constant Qt::Key_Context1") +
    gsi::enum_const ("Key_Context2", Qt::Key_Context2, "@brief Enum constant Qt::Key_Context2") +
    gsi::enum_const ("Key_Context3", Qt::Key_Context3, "@brief Enum constant Qt::Key_Context3") +
    gsi::enum_const ("Key_Context4", Qt::Key_Context4, "@brief Enum constant Qt::Key_Context4") +
    gsi::enum_const ("Key_Call", Qt::Key_Call, "@brief Enum constant Qt::Key_Call") +
    gsi::enum_const ("Key_Hangup", Qt::Key_Hangup, "@brief Enum constant Qt::Key_Hangup") +
    gsi::enum_const ("Key_Flip", Qt::Key_Flip, "@brief Enum constant Qt::Key_Flip") +
    gsi::enum_const ("Key_unknown", Qt::Key_unknown, "@brief Enum constant Qt::Key_unknown"),
  "@qt\n@brief This class represents the Qt::Key enum");

static gsi::QFlagsClass<Qt::Key > decl_Qt_Key_Enums ("Qt_QFlags_Key",
  "@qt\n@brief This class represents the QFlags<Qt::Key> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_Key_Enum_in_parent (decl_Qt_Key_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_Key_Enum_as_child (decl_Qt_Key_Enum, "Key");
static gsi::ClassExt<Qt_Namespace> decl_Qt_Key_Enums_as_child (decl_Qt_Key_Enums, "QFlags_Key");

}


//  Implementation of the enum wrapper class for Qt::KeyboardModifier
namespace qt_gsi
{

static gsi::Enum<Qt::KeyboardModifier> decl_Qt_KeyboardModifier_Enum ("Qt_KeyboardModifier",
    gsi::enum_const ("NoModifier", Qt::NoModifier, "@brief Enum constant Qt::NoModifier") +
    gsi::enum_const ("ShiftModifier", Qt::ShiftModifier, "@brief Enum constant Qt::ShiftModifier") +
    gsi::enum_const ("ControlModifier", Qt::ControlModifier, "@brief Enum constant Qt::ControlModifier") +
    gsi::enum_const ("AltModifier", Qt::AltModifier, "@brief Enum constant Qt::AltModifier") +
    gsi::enum_const ("MetaModifier", Qt::MetaModifier, "@brief Enum constant Qt::MetaModifier") +
    gsi::enum_const ("KeypadModifier", Qt::KeypadModifier, "@brief Enum constant Qt::KeypadModifier") +
    gsi::enum_const ("GroupSwitchModifier", Qt::GroupSwitchModifier, "@brief Enum constant Qt::GroupSwitchModifier") +
    gsi::enum_const ("KeyboardModifierMask", Qt::KeyboardModifierMask, "@brief Enum constant Qt::KeyboardModifierMask"),
  "@qt\n@brief This class represents the Qt::KeyboardModifier enum");

static gsi::QFlagsClass<Qt::KeyboardModifier > decl_Qt_KeyboardModifier_Enums ("Qt_QFlags_KeyboardModifier",
  "@qt\n@brief This class represents the QFlags<Qt::KeyboardModifier> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_KeyboardModifier_Enum_in_parent (decl_Qt_KeyboardModifier_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_KeyboardModifier_Enum_as_child (decl_Qt_KeyboardModifier_Enum, "KeyboardModifier");
static gsi::ClassExt<Qt_Namespace> decl_Qt_KeyboardModifier_Enums_as_child (decl_Qt_KeyboardModifier_Enums, "QFlags_KeyboardModifier");

}


//  Implementation of the enum wrapper class for Qt::LayoutDirection
namespace qt_gsi
{

static gsi::Enum<Qt::LayoutDirection> decl_Qt_LayoutDirection_Enum ("Qt_LayoutDirection",
    gsi::enum_const ("LeftToRight", Qt::LeftToRight, "@brief Enum constant Qt::LeftToRight") +
    gsi::enum_const ("RightToLeft", Qt::RightToLeft, "@brief Enum constant Qt::RightToLeft"),
  "@qt\n@brief This class represents the Qt::LayoutDirection enum");

static gsi::QFlagsClass<Qt::LayoutDirection > decl_Qt_LayoutDirection_Enums ("Qt_QFlags_LayoutDirection",
  "@qt\n@brief This class represents the QFlags<Qt::LayoutDirection> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_LayoutDirection_Enum_in_parent (decl_Qt_LayoutDirection_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_LayoutDirection_Enum_as_child (decl_Qt_LayoutDirection_Enum, "LayoutDirection");
static gsi::ClassExt<Qt_Namespace> decl_Qt_LayoutDirection_Enums_as_child (decl_Qt_LayoutDirection_Enums, "QFlags_LayoutDirection");

}


//  Implementation of the enum wrapper class for Qt::MaskMode
namespace qt_gsi
{

static gsi::Enum<Qt::MaskMode> decl_Qt_MaskMode_Enum ("Qt_MaskMode",
    gsi::enum_const ("MaskInColor", Qt::MaskInColor, "@brief Enum constant Qt::MaskInColor") +
    gsi::enum_const ("MaskOutColor", Qt::MaskOutColor, "@brief Enum constant Qt::MaskOutColor"),
  "@qt\n@brief This class represents the Qt::MaskMode enum");

static gsi::QFlagsClass<Qt::MaskMode > decl_Qt_MaskMode_Enums ("Qt_QFlags_MaskMode",
  "@qt\n@brief This class represents the QFlags<Qt::MaskMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_MaskMode_Enum_in_parent (decl_Qt_MaskMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_MaskMode_Enum_as_child (decl_Qt_MaskMode_Enum, "MaskMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_MaskMode_Enums_as_child (decl_Qt_MaskMode_Enums, "QFlags_MaskMode");

}


//  Implementation of the enum wrapper class for Qt::MatchFlag
namespace qt_gsi
{

static gsi::Enum<Qt::MatchFlag> decl_Qt_MatchFlag_Enum ("Qt_MatchFlag",
    gsi::enum_const ("MatchExactly", Qt::MatchExactly, "@brief Enum constant Qt::MatchExactly") +
    gsi::enum_const ("MatchContains", Qt::MatchContains, "@brief Enum constant Qt::MatchContains") +
    gsi::enum_const ("MatchStartsWith", Qt::MatchStartsWith, "@brief Enum constant Qt::MatchStartsWith") +
    gsi::enum_const ("MatchEndsWith", Qt::MatchEndsWith, "@brief Enum constant Qt::MatchEndsWith") +
    gsi::enum_const ("MatchRegExp", Qt::MatchRegExp, "@brief Enum constant Qt::MatchRegExp") +
    gsi::enum_const ("MatchWildcard", Qt::MatchWildcard, "@brief Enum constant Qt::MatchWildcard") +
    gsi::enum_const ("MatchFixedString", Qt::MatchFixedString, "@brief Enum constant Qt::MatchFixedString") +
    gsi::enum_const ("MatchCaseSensitive", Qt::MatchCaseSensitive, "@brief Enum constant Qt::MatchCaseSensitive") +
    gsi::enum_const ("MatchWrap", Qt::MatchWrap, "@brief Enum constant Qt::MatchWrap") +
    gsi::enum_const ("MatchRecursive", Qt::MatchRecursive, "@brief Enum constant Qt::MatchRecursive"),
  "@qt\n@brief This class represents the Qt::MatchFlag enum");

static gsi::QFlagsClass<Qt::MatchFlag > decl_Qt_MatchFlag_Enums ("Qt_QFlags_MatchFlag",
  "@qt\n@brief This class represents the QFlags<Qt::MatchFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_MatchFlag_Enum_in_parent (decl_Qt_MatchFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_MatchFlag_Enum_as_child (decl_Qt_MatchFlag_Enum, "MatchFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_MatchFlag_Enums_as_child (decl_Qt_MatchFlag_Enums, "QFlags_MatchFlag");

}


//  Implementation of the enum wrapper class for Qt::Modifier
namespace qt_gsi
{

static gsi::Enum<Qt::Modifier> decl_Qt_Modifier_Enum ("Qt_Modifier",
    gsi::enum_const ("META", Qt::META, "@brief Enum constant Qt::META") +
    gsi::enum_const ("SHIFT", Qt::SHIFT, "@brief Enum constant Qt::SHIFT") +
    gsi::enum_const ("CTRL", Qt::CTRL, "@brief Enum constant Qt::CTRL") +
    gsi::enum_const ("ALT", Qt::ALT, "@brief Enum constant Qt::ALT") +
    gsi::enum_const ("MODIFIER_MASK", Qt::MODIFIER_MASK, "@brief Enum constant Qt::MODIFIER_MASK") +
    gsi::enum_const ("UNICODE_ACCEL", Qt::UNICODE_ACCEL, "@brief Enum constant Qt::UNICODE_ACCEL"),
  "@qt\n@brief This class represents the Qt::Modifier enum");

static gsi::QFlagsClass<Qt::Modifier > decl_Qt_Modifier_Enums ("Qt_QFlags_Modifier",
  "@qt\n@brief This class represents the QFlags<Qt::Modifier> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_Modifier_Enum_in_parent (decl_Qt_Modifier_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_Modifier_Enum_as_child (decl_Qt_Modifier_Enum, "Modifier");
static gsi::ClassExt<Qt_Namespace> decl_Qt_Modifier_Enums_as_child (decl_Qt_Modifier_Enums, "QFlags_Modifier");

}


//  Implementation of the enum wrapper class for Qt::MouseButton
namespace qt_gsi
{

static gsi::Enum<Qt::MouseButton> decl_Qt_MouseButton_Enum ("Qt_MouseButton",
    gsi::enum_const ("NoButton", Qt::NoButton, "@brief Enum constant Qt::NoButton") +
    gsi::enum_const ("LeftButton", Qt::LeftButton, "@brief Enum constant Qt::LeftButton") +
    gsi::enum_const ("RightButton", Qt::RightButton, "@brief Enum constant Qt::RightButton") +
    gsi::enum_const ("MidButton", Qt::MidButton, "@brief Enum constant Qt::MidButton") +
    gsi::enum_const ("XButton1", Qt::XButton1, "@brief Enum constant Qt::XButton1") +
    gsi::enum_const ("XButton2", Qt::XButton2, "@brief Enum constant Qt::XButton2") +
    gsi::enum_const ("MouseButtonMask", Qt::MouseButtonMask, "@brief Enum constant Qt::MouseButtonMask"),
  "@qt\n@brief This class represents the Qt::MouseButton enum");

static gsi::QFlagsClass<Qt::MouseButton > decl_Qt_MouseButton_Enums ("Qt_QFlags_MouseButton",
  "@qt\n@brief This class represents the QFlags<Qt::MouseButton> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_MouseButton_Enum_in_parent (decl_Qt_MouseButton_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_MouseButton_Enum_as_child (decl_Qt_MouseButton_Enum, "MouseButton");
static gsi::ClassExt<Qt_Namespace> decl_Qt_MouseButton_Enums_as_child (decl_Qt_MouseButton_Enums, "QFlags_MouseButton");

}


//  Implementation of the enum wrapper class for Qt::NavigationMode
namespace qt_gsi
{

static gsi::Enum<Qt::NavigationMode> decl_Qt_NavigationMode_Enum ("Qt_NavigationMode",
    gsi::enum_const ("NavigationModeNone", Qt::NavigationModeNone, "@brief Enum constant Qt::NavigationModeNone") +
    gsi::enum_const ("NavigationModeKeypadTabOrder", Qt::NavigationModeKeypadTabOrder, "@brief Enum constant Qt::NavigationModeKeypadTabOrder") +
    gsi::enum_const ("NavigationModeKeypadDirectional", Qt::NavigationModeKeypadDirectional, "@brief Enum constant Qt::NavigationModeKeypadDirectional") +
    gsi::enum_const ("NavigationModeCursorAuto", Qt::NavigationModeCursorAuto, "@brief Enum constant Qt::NavigationModeCursorAuto") +
    gsi::enum_const ("NavigationModeCursorForceVisible", Qt::NavigationModeCursorForceVisible, "@brief Enum constant Qt::NavigationModeCursorForceVisible"),
  "@qt\n@brief This class represents the Qt::NavigationMode enum");

static gsi::QFlagsClass<Qt::NavigationMode > decl_Qt_NavigationMode_Enums ("Qt_QFlags_NavigationMode",
  "@qt\n@brief This class represents the QFlags<Qt::NavigationMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_NavigationMode_Enum_in_parent (decl_Qt_NavigationMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_NavigationMode_Enum_as_child (decl_Qt_NavigationMode_Enum, "NavigationMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_NavigationMode_Enums_as_child (decl_Qt_NavigationMode_Enums, "QFlags_NavigationMode");

}


//  Implementation of the enum wrapper class for Qt::Orientation
namespace qt_gsi
{

static gsi::Enum<Qt::Orientation> decl_Qt_Orientation_Enum ("Qt_Orientation",
    gsi::enum_const ("Horizontal", Qt::Horizontal, "@brief Enum constant Qt::Horizontal") +
    gsi::enum_const ("Vertical", Qt::Vertical, "@brief Enum constant Qt::Vertical"),
  "@qt\n@brief This class represents the Qt::Orientation enum");

static gsi::QFlagsClass<Qt::Orientation > decl_Qt_Orientation_Enums ("Qt_QFlags_Orientation",
  "@qt\n@brief This class represents the QFlags<Qt::Orientation> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_Orientation_Enum_in_parent (decl_Qt_Orientation_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_Orientation_Enum_as_child (decl_Qt_Orientation_Enum, "Orientation");
static gsi::ClassExt<Qt_Namespace> decl_Qt_Orientation_Enums_as_child (decl_Qt_Orientation_Enums, "QFlags_Orientation");

}


//  Implementation of the enum wrapper class for Qt::PenCapStyle
namespace qt_gsi
{

static gsi::Enum<Qt::PenCapStyle> decl_Qt_PenCapStyle_Enum ("Qt_PenCapStyle",
    gsi::enum_const ("FlatCap", Qt::FlatCap, "@brief Enum constant Qt::FlatCap") +
    gsi::enum_const ("SquareCap", Qt::SquareCap, "@brief Enum constant Qt::SquareCap") +
    gsi::enum_const ("RoundCap", Qt::RoundCap, "@brief Enum constant Qt::RoundCap") +
    gsi::enum_const ("MPenCapStyle", Qt::MPenCapStyle, "@brief Enum constant Qt::MPenCapStyle"),
  "@qt\n@brief This class represents the Qt::PenCapStyle enum");

static gsi::QFlagsClass<Qt::PenCapStyle > decl_Qt_PenCapStyle_Enums ("Qt_QFlags_PenCapStyle",
  "@qt\n@brief This class represents the QFlags<Qt::PenCapStyle> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_PenCapStyle_Enum_in_parent (decl_Qt_PenCapStyle_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_PenCapStyle_Enum_as_child (decl_Qt_PenCapStyle_Enum, "PenCapStyle");
static gsi::ClassExt<Qt_Namespace> decl_Qt_PenCapStyle_Enums_as_child (decl_Qt_PenCapStyle_Enums, "QFlags_PenCapStyle");

}


//  Implementation of the enum wrapper class for Qt::PenJoinStyle
namespace qt_gsi
{

static gsi::Enum<Qt::PenJoinStyle> decl_Qt_PenJoinStyle_Enum ("Qt_PenJoinStyle",
    gsi::enum_const ("MiterJoin", Qt::MiterJoin, "@brief Enum constant Qt::MiterJoin") +
    gsi::enum_const ("BevelJoin", Qt::BevelJoin, "@brief Enum constant Qt::BevelJoin") +
    gsi::enum_const ("RoundJoin", Qt::RoundJoin, "@brief Enum constant Qt::RoundJoin") +
    gsi::enum_const ("SvgMiterJoin", Qt::SvgMiterJoin, "@brief Enum constant Qt::SvgMiterJoin") +
    gsi::enum_const ("MPenJoinStyle", Qt::MPenJoinStyle, "@brief Enum constant Qt::MPenJoinStyle"),
  "@qt\n@brief This class represents the Qt::PenJoinStyle enum");

static gsi::QFlagsClass<Qt::PenJoinStyle > decl_Qt_PenJoinStyle_Enums ("Qt_QFlags_PenJoinStyle",
  "@qt\n@brief This class represents the QFlags<Qt::PenJoinStyle> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_PenJoinStyle_Enum_in_parent (decl_Qt_PenJoinStyle_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_PenJoinStyle_Enum_as_child (decl_Qt_PenJoinStyle_Enum, "PenJoinStyle");
static gsi::ClassExt<Qt_Namespace> decl_Qt_PenJoinStyle_Enums_as_child (decl_Qt_PenJoinStyle_Enums, "QFlags_PenJoinStyle");

}


//  Implementation of the enum wrapper class for Qt::PenStyle
namespace qt_gsi
{

static gsi::Enum<Qt::PenStyle> decl_Qt_PenStyle_Enum ("Qt_PenStyle",
    gsi::enum_const ("NoPen", Qt::NoPen, "@brief Enum constant Qt::NoPen") +
    gsi::enum_const ("SolidLine", Qt::SolidLine, "@brief Enum constant Qt::SolidLine") +
    gsi::enum_const ("DashLine", Qt::DashLine, "@brief Enum constant Qt::DashLine") +
    gsi::enum_const ("DotLine", Qt::DotLine, "@brief Enum constant Qt::DotLine") +
    gsi::enum_const ("DashDotLine", Qt::DashDotLine, "@brief Enum constant Qt::DashDotLine") +
    gsi::enum_const ("DashDotDotLine", Qt::DashDotDotLine, "@brief Enum constant Qt::DashDotDotLine") +
    gsi::enum_const ("CustomDashLine", Qt::CustomDashLine, "@brief Enum constant Qt::CustomDashLine") +
    gsi::enum_const ("MPenStyle", Qt::MPenStyle, "@brief Enum constant Qt::MPenStyle"),
  "@qt\n@brief This class represents the Qt::PenStyle enum");

static gsi::QFlagsClass<Qt::PenStyle > decl_Qt_PenStyle_Enums ("Qt_QFlags_PenStyle",
  "@qt\n@brief This class represents the QFlags<Qt::PenStyle> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_PenStyle_Enum_in_parent (decl_Qt_PenStyle_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_PenStyle_Enum_as_child (decl_Qt_PenStyle_Enum, "PenStyle");
static gsi::ClassExt<Qt_Namespace> decl_Qt_PenStyle_Enums_as_child (decl_Qt_PenStyle_Enums, "QFlags_PenStyle");

}


//  Implementation of the enum wrapper class for Qt::ScrollBarPolicy
namespace qt_gsi
{

static gsi::Enum<Qt::ScrollBarPolicy> decl_Qt_ScrollBarPolicy_Enum ("Qt_ScrollBarPolicy",
    gsi::enum_const ("ScrollBarAsNeeded", Qt::ScrollBarAsNeeded, "@brief Enum constant Qt::ScrollBarAsNeeded") +
    gsi::enum_const ("ScrollBarAlwaysOff", Qt::ScrollBarAlwaysOff, "@brief Enum constant Qt::ScrollBarAlwaysOff") +
    gsi::enum_const ("ScrollBarAlwaysOn", Qt::ScrollBarAlwaysOn, "@brief Enum constant Qt::ScrollBarAlwaysOn"),
  "@qt\n@brief This class represents the Qt::ScrollBarPolicy enum");

static gsi::QFlagsClass<Qt::ScrollBarPolicy > decl_Qt_ScrollBarPolicy_Enums ("Qt_QFlags_ScrollBarPolicy",
  "@qt\n@brief This class represents the QFlags<Qt::ScrollBarPolicy> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ScrollBarPolicy_Enum_in_parent (decl_Qt_ScrollBarPolicy_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ScrollBarPolicy_Enum_as_child (decl_Qt_ScrollBarPolicy_Enum, "ScrollBarPolicy");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ScrollBarPolicy_Enums_as_child (decl_Qt_ScrollBarPolicy_Enums, "QFlags_ScrollBarPolicy");

}


//  Implementation of the enum wrapper class for Qt::ShortcutContext
namespace qt_gsi
{

static gsi::Enum<Qt::ShortcutContext> decl_Qt_ShortcutContext_Enum ("Qt_ShortcutContext",
    gsi::enum_const ("WidgetShortcut", Qt::WidgetShortcut, "@brief Enum constant Qt::WidgetShortcut") +
    gsi::enum_const ("WindowShortcut", Qt::WindowShortcut, "@brief Enum constant Qt::WindowShortcut") +
    gsi::enum_const ("ApplicationShortcut", Qt::ApplicationShortcut, "@brief Enum constant Qt::ApplicationShortcut") +
    gsi::enum_const ("WidgetWithChildrenShortcut", Qt::WidgetWithChildrenShortcut, "@brief Enum constant Qt::WidgetWithChildrenShortcut"),
  "@qt\n@brief This class represents the Qt::ShortcutContext enum");

static gsi::QFlagsClass<Qt::ShortcutContext > decl_Qt_ShortcutContext_Enums ("Qt_QFlags_ShortcutContext",
  "@qt\n@brief This class represents the QFlags<Qt::ShortcutContext> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ShortcutContext_Enum_in_parent (decl_Qt_ShortcutContext_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ShortcutContext_Enum_as_child (decl_Qt_ShortcutContext_Enum, "ShortcutContext");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ShortcutContext_Enums_as_child (decl_Qt_ShortcutContext_Enums, "QFlags_ShortcutContext");

}


//  Implementation of the enum wrapper class for Qt::SizeHint
namespace qt_gsi
{

static gsi::Enum<Qt::SizeHint> decl_Qt_SizeHint_Enum ("Qt_SizeHint",
    gsi::enum_const ("MinimumSize", Qt::MinimumSize, "@brief Enum constant Qt::MinimumSize") +
    gsi::enum_const ("PreferredSize", Qt::PreferredSize, "@brief Enum constant Qt::PreferredSize") +
    gsi::enum_const ("MaximumSize", Qt::MaximumSize, "@brief Enum constant Qt::MaximumSize") +
    gsi::enum_const ("MinimumDescent", Qt::MinimumDescent, "@brief Enum constant Qt::MinimumDescent") +
    gsi::enum_const ("NSizeHints", Qt::NSizeHints, "@brief Enum constant Qt::NSizeHints"),
  "@qt\n@brief This class represents the Qt::SizeHint enum");

static gsi::QFlagsClass<Qt::SizeHint > decl_Qt_SizeHint_Enums ("Qt_QFlags_SizeHint",
  "@qt\n@brief This class represents the QFlags<Qt::SizeHint> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_SizeHint_Enum_in_parent (decl_Qt_SizeHint_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_SizeHint_Enum_as_child (decl_Qt_SizeHint_Enum, "SizeHint");
static gsi::ClassExt<Qt_Namespace> decl_Qt_SizeHint_Enums_as_child (decl_Qt_SizeHint_Enums, "QFlags_SizeHint");

}


//  Implementation of the enum wrapper class for Qt::SizeMode
namespace qt_gsi
{

static gsi::Enum<Qt::SizeMode> decl_Qt_SizeMode_Enum ("Qt_SizeMode",
    gsi::enum_const ("AbsoluteSize", Qt::AbsoluteSize, "@brief Enum constant Qt::AbsoluteSize") +
    gsi::enum_const ("RelativeSize", Qt::RelativeSize, "@brief Enum constant Qt::RelativeSize"),
  "@qt\n@brief This class represents the Qt::SizeMode enum");

static gsi::QFlagsClass<Qt::SizeMode > decl_Qt_SizeMode_Enums ("Qt_QFlags_SizeMode",
  "@qt\n@brief This class represents the QFlags<Qt::SizeMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_SizeMode_Enum_in_parent (decl_Qt_SizeMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_SizeMode_Enum_as_child (decl_Qt_SizeMode_Enum, "SizeMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_SizeMode_Enums_as_child (decl_Qt_SizeMode_Enums, "QFlags_SizeMode");

}


//  Implementation of the enum wrapper class for Qt::SortOrder
namespace qt_gsi
{

static gsi::Enum<Qt::SortOrder> decl_Qt_SortOrder_Enum ("Qt_SortOrder",
    gsi::enum_const ("AscendingOrder", Qt::AscendingOrder, "@brief Enum constant Qt::AscendingOrder") +
    gsi::enum_const ("DescendingOrder", Qt::DescendingOrder, "@brief Enum constant Qt::DescendingOrder"),
  "@qt\n@brief This class represents the Qt::SortOrder enum");

static gsi::QFlagsClass<Qt::SortOrder > decl_Qt_SortOrder_Enums ("Qt_QFlags_SortOrder",
  "@qt\n@brief This class represents the QFlags<Qt::SortOrder> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_SortOrder_Enum_in_parent (decl_Qt_SortOrder_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_SortOrder_Enum_as_child (decl_Qt_SortOrder_Enum, "SortOrder");
static gsi::ClassExt<Qt_Namespace> decl_Qt_SortOrder_Enums_as_child (decl_Qt_SortOrder_Enums, "QFlags_SortOrder");

}


//  Implementation of the enum wrapper class for Qt::TextElideMode
namespace qt_gsi
{

static gsi::Enum<Qt::TextElideMode> decl_Qt_TextElideMode_Enum ("Qt_TextElideMode",
    gsi::enum_const ("ElideLeft", Qt::ElideLeft, "@brief Enum constant Qt::ElideLeft") +
    gsi::enum_const ("ElideRight", Qt::ElideRight, "@brief Enum constant Qt::ElideRight") +
    gsi::enum_const ("ElideMiddle", Qt::ElideMiddle, "@brief Enum constant Qt::ElideMiddle") +
    gsi::enum_const ("ElideNone", Qt::ElideNone, "@brief Enum constant Qt::ElideNone"),
  "@qt\n@brief This class represents the Qt::TextElideMode enum");

static gsi::QFlagsClass<Qt::TextElideMode > decl_Qt_TextElideMode_Enums ("Qt_QFlags_TextElideMode",
  "@qt\n@brief This class represents the QFlags<Qt::TextElideMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TextElideMode_Enum_in_parent (decl_Qt_TextElideMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextElideMode_Enum_as_child (decl_Qt_TextElideMode_Enum, "TextElideMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextElideMode_Enums_as_child (decl_Qt_TextElideMode_Enums, "QFlags_TextElideMode");

}


//  Implementation of the enum wrapper class for Qt::TextFlag
namespace qt_gsi
{

static gsi::Enum<Qt::TextFlag> decl_Qt_TextFlag_Enum ("Qt_TextFlag",
    gsi::enum_const ("TextSingleLine", Qt::TextSingleLine, "@brief Enum constant Qt::TextSingleLine") +
    gsi::enum_const ("TextDontClip", Qt::TextDontClip, "@brief Enum constant Qt::TextDontClip") +
    gsi::enum_const ("TextExpandTabs", Qt::TextExpandTabs, "@brief Enum constant Qt::TextExpandTabs") +
    gsi::enum_const ("TextShowMnemonic", Qt::TextShowMnemonic, "@brief Enum constant Qt::TextShowMnemonic") +
    gsi::enum_const ("TextWordWrap", Qt::TextWordWrap, "@brief Enum constant Qt::TextWordWrap") +
    gsi::enum_const ("TextWrapAnywhere", Qt::TextWrapAnywhere, "@brief Enum constant Qt::TextWrapAnywhere") +
    gsi::enum_const ("TextDontPrint", Qt::TextDontPrint, "@brief Enum constant Qt::TextDontPrint") +
    gsi::enum_const ("TextIncludeTrailingSpaces", Qt::TextIncludeTrailingSpaces, "@brief Enum constant Qt::TextIncludeTrailingSpaces") +
    gsi::enum_const ("TextHideMnemonic", Qt::TextHideMnemonic, "@brief Enum constant Qt::TextHideMnemonic") +
    gsi::enum_const ("TextJustificationForced", Qt::TextJustificationForced, "@brief Enum constant Qt::TextJustificationForced") +
    gsi::enum_const ("TextForceLeftToRight", Qt::TextForceLeftToRight, "@brief Enum constant Qt::TextForceLeftToRight") +
    gsi::enum_const ("TextForceRightToLeft", Qt::TextForceRightToLeft, "@brief Enum constant Qt::TextForceRightToLeft") +
    gsi::enum_const ("TextLongestVariant", Qt::TextLongestVariant, "@brief Enum constant Qt::TextLongestVariant"),
  "@qt\n@brief This class represents the Qt::TextFlag enum");

static gsi::QFlagsClass<Qt::TextFlag > decl_Qt_TextFlag_Enums ("Qt_QFlags_TextFlag",
  "@qt\n@brief This class represents the QFlags<Qt::TextFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TextFlag_Enum_in_parent (decl_Qt_TextFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextFlag_Enum_as_child (decl_Qt_TextFlag_Enum, "TextFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextFlag_Enums_as_child (decl_Qt_TextFlag_Enums, "QFlags_TextFlag");

}


//  Implementation of the enum wrapper class for Qt::TextFormat
namespace qt_gsi
{

static gsi::Enum<Qt::TextFormat> decl_Qt_TextFormat_Enum ("Qt_TextFormat",
    gsi::enum_const ("PlainText", Qt::PlainText, "@brief Enum constant Qt::PlainText") +
    gsi::enum_const ("RichText", Qt::RichText, "@brief Enum constant Qt::RichText") +
    gsi::enum_const ("AutoText", Qt::AutoText, "@brief Enum constant Qt::AutoText") +
    gsi::enum_const ("LogText", Qt::LogText, "@brief Enum constant Qt::LogText"),
  "@qt\n@brief This class represents the Qt::TextFormat enum");

static gsi::QFlagsClass<Qt::TextFormat > decl_Qt_TextFormat_Enums ("Qt_QFlags_TextFormat",
  "@qt\n@brief This class represents the QFlags<Qt::TextFormat> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TextFormat_Enum_in_parent (decl_Qt_TextFormat_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextFormat_Enum_as_child (decl_Qt_TextFormat_Enum, "TextFormat");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextFormat_Enums_as_child (decl_Qt_TextFormat_Enums, "QFlags_TextFormat");

}


//  Implementation of the enum wrapper class for Qt::TextInteractionFlag
namespace qt_gsi
{

static gsi::Enum<Qt::TextInteractionFlag> decl_Qt_TextInteractionFlag_Enum ("Qt_TextInteractionFlag",
    gsi::enum_const ("NoTextInteraction", Qt::NoTextInteraction, "@brief Enum constant Qt::NoTextInteraction") +
    gsi::enum_const ("TextSelectableByMouse", Qt::TextSelectableByMouse, "@brief Enum constant Qt::TextSelectableByMouse") +
    gsi::enum_const ("TextSelectableByKeyboard", Qt::TextSelectableByKeyboard, "@brief Enum constant Qt::TextSelectableByKeyboard") +
    gsi::enum_const ("LinksAccessibleByMouse", Qt::LinksAccessibleByMouse, "@brief Enum constant Qt::LinksAccessibleByMouse") +
    gsi::enum_const ("LinksAccessibleByKeyboard", Qt::LinksAccessibleByKeyboard, "@brief Enum constant Qt::LinksAccessibleByKeyboard") +
    gsi::enum_const ("TextEditable", Qt::TextEditable, "@brief Enum constant Qt::TextEditable") +
    gsi::enum_const ("TextEditorInteraction", Qt::TextEditorInteraction, "@brief Enum constant Qt::TextEditorInteraction") +
    gsi::enum_const ("TextBrowserInteraction", Qt::TextBrowserInteraction, "@brief Enum constant Qt::TextBrowserInteraction"),
  "@qt\n@brief This class represents the Qt::TextInteractionFlag enum");

static gsi::QFlagsClass<Qt::TextInteractionFlag > decl_Qt_TextInteractionFlag_Enums ("Qt_QFlags_TextInteractionFlag",
  "@qt\n@brief This class represents the QFlags<Qt::TextInteractionFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TextInteractionFlag_Enum_in_parent (decl_Qt_TextInteractionFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextInteractionFlag_Enum_as_child (decl_Qt_TextInteractionFlag_Enum, "TextInteractionFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextInteractionFlag_Enums_as_child (decl_Qt_TextInteractionFlag_Enums, "QFlags_TextInteractionFlag");

}


//  Implementation of the enum wrapper class for Qt::TileRule
namespace qt_gsi
{

static gsi::Enum<Qt::TileRule> decl_Qt_TileRule_Enum ("Qt_TileRule",
    gsi::enum_const ("StretchTile", Qt::StretchTile, "@brief Enum constant Qt::StretchTile") +
    gsi::enum_const ("RepeatTile", Qt::RepeatTile, "@brief Enum constant Qt::RepeatTile") +
    gsi::enum_const ("RoundTile", Qt::RoundTile, "@brief Enum constant Qt::RoundTile"),
  "@qt\n@brief This class represents the Qt::TileRule enum");

static gsi::QFlagsClass<Qt::TileRule > decl_Qt_TileRule_Enums ("Qt_QFlags_TileRule",
  "@qt\n@brief This class represents the QFlags<Qt::TileRule> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TileRule_Enum_in_parent (decl_Qt_TileRule_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TileRule_Enum_as_child (decl_Qt_TileRule_Enum, "TileRule");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TileRule_Enums_as_child (decl_Qt_TileRule_Enums, "QFlags_TileRule");

}


//  Implementation of the enum wrapper class for Qt::TimeSpec
namespace qt_gsi
{

static gsi::Enum<Qt::TimeSpec> decl_Qt_TimeSpec_Enum ("Qt_TimeSpec",
    gsi::enum_const ("LocalTime", Qt::LocalTime, "@brief Enum constant Qt::LocalTime") +
    gsi::enum_const ("UTC", Qt::UTC, "@brief Enum constant Qt::UTC") +
    gsi::enum_const ("OffsetFromUTC", Qt::OffsetFromUTC, "@brief Enum constant Qt::OffsetFromUTC"),
  "@qt\n@brief This class represents the Qt::TimeSpec enum");

static gsi::QFlagsClass<Qt::TimeSpec > decl_Qt_TimeSpec_Enums ("Qt_QFlags_TimeSpec",
  "@qt\n@brief This class represents the QFlags<Qt::TimeSpec> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TimeSpec_Enum_in_parent (decl_Qt_TimeSpec_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TimeSpec_Enum_as_child (decl_Qt_TimeSpec_Enum, "TimeSpec");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TimeSpec_Enums_as_child (decl_Qt_TimeSpec_Enums, "QFlags_TimeSpec");

}


//  Implementation of the enum wrapper class for Qt::ToolBarArea
namespace qt_gsi
{

static gsi::Enum<Qt::ToolBarArea> decl_Qt_ToolBarArea_Enum ("Qt_ToolBarArea",
    gsi::enum_const ("LeftToolBarArea", Qt::LeftToolBarArea, "@brief Enum constant Qt::LeftToolBarArea") +
    gsi::enum_const ("RightToolBarArea", Qt::RightToolBarArea, "@brief Enum constant Qt::RightToolBarArea") +
    gsi::enum_const ("TopToolBarArea", Qt::TopToolBarArea, "@brief Enum constant Qt::TopToolBarArea") +
    gsi::enum_const ("BottomToolBarArea", Qt::BottomToolBarArea, "@brief Enum constant Qt::BottomToolBarArea") +
    gsi::enum_const ("ToolBarArea_Mask", Qt::ToolBarArea_Mask, "@brief Enum constant Qt::ToolBarArea_Mask") +
    gsi::enum_const ("AllToolBarAreas", Qt::AllToolBarAreas, "@brief Enum constant Qt::AllToolBarAreas") +
    gsi::enum_const ("NoToolBarArea", Qt::NoToolBarArea, "@brief Enum constant Qt::NoToolBarArea"),
  "@qt\n@brief This class represents the Qt::ToolBarArea enum");

static gsi::QFlagsClass<Qt::ToolBarArea > decl_Qt_ToolBarArea_Enums ("Qt_QFlags_ToolBarArea",
  "@qt\n@brief This class represents the QFlags<Qt::ToolBarArea> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ToolBarArea_Enum_in_parent (decl_Qt_ToolBarArea_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolBarArea_Enum_as_child (decl_Qt_ToolBarArea_Enum, "ToolBarArea");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolBarArea_Enums_as_child (decl_Qt_ToolBarArea_Enums, "QFlags_ToolBarArea");

}


//  Implementation of the enum wrapper class for Qt::ToolBarAreaSizes
namespace qt_gsi
{

static gsi::Enum<Qt::ToolBarAreaSizes> decl_Qt_ToolBarAreaSizes_Enum ("Qt_ToolBarAreaSizes",
    gsi::enum_const ("NToolBarAreas", Qt::NToolBarAreas, "@brief Enum constant Qt::NToolBarAreas"),
  "@qt\n@brief This class represents the Qt::ToolBarAreaSizes enum");

static gsi::QFlagsClass<Qt::ToolBarAreaSizes > decl_Qt_ToolBarAreaSizes_Enums ("Qt_QFlags_ToolBarAreaSizes",
  "@qt\n@brief This class represents the QFlags<Qt::ToolBarAreaSizes> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ToolBarAreaSizes_Enum_in_parent (decl_Qt_ToolBarAreaSizes_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolBarAreaSizes_Enum_as_child (decl_Qt_ToolBarAreaSizes_Enum, "ToolBarAreaSizes");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolBarAreaSizes_Enums_as_child (decl_Qt_ToolBarAreaSizes_Enums, "QFlags_ToolBarAreaSizes");

}


//  Implementation of the enum wrapper class for Qt::ToolButtonStyle
namespace qt_gsi
{

static gsi::Enum<Qt::ToolButtonStyle> decl_Qt_ToolButtonStyle_Enum ("Qt_ToolButtonStyle",
    gsi::enum_const ("ToolButtonIconOnly", Qt::ToolButtonIconOnly, "@brief Enum constant Qt::ToolButtonIconOnly") +
    gsi::enum_const ("ToolButtonTextOnly", Qt::ToolButtonTextOnly, "@brief Enum constant Qt::ToolButtonTextOnly") +
    gsi::enum_const ("ToolButtonTextBesideIcon", Qt::ToolButtonTextBesideIcon, "@brief Enum constant Qt::ToolButtonTextBesideIcon") +
    gsi::enum_const ("ToolButtonTextUnderIcon", Qt::ToolButtonTextUnderIcon, "@brief Enum constant Qt::ToolButtonTextUnderIcon") +
    gsi::enum_const ("ToolButtonFollowStyle", Qt::ToolButtonFollowStyle, "@brief Enum constant Qt::ToolButtonFollowStyle"),
  "@qt\n@brief This class represents the Qt::ToolButtonStyle enum");

static gsi::QFlagsClass<Qt::ToolButtonStyle > decl_Qt_ToolButtonStyle_Enums ("Qt_QFlags_ToolButtonStyle",
  "@qt\n@brief This class represents the QFlags<Qt::ToolButtonStyle> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ToolButtonStyle_Enum_in_parent (decl_Qt_ToolButtonStyle_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolButtonStyle_Enum_as_child (decl_Qt_ToolButtonStyle_Enum, "ToolButtonStyle");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolButtonStyle_Enums_as_child (decl_Qt_ToolButtonStyle_Enums, "QFlags_ToolButtonStyle");

}


//  Implementation of the enum wrapper class for Qt::TouchPointState
namespace qt_gsi
{

static gsi::Enum<Qt::TouchPointState> decl_Qt_TouchPointState_Enum ("Qt_TouchPointState",
    gsi::enum_const ("TouchPointPressed", Qt::TouchPointPressed, "@brief Enum constant Qt::TouchPointPressed") +
    gsi::enum_const ("TouchPointMoved", Qt::TouchPointMoved, "@brief Enum constant Qt::TouchPointMoved") +
    gsi::enum_const ("TouchPointStationary", Qt::TouchPointStationary, "@brief Enum constant Qt::TouchPointStationary") +
    gsi::enum_const ("TouchPointReleased", Qt::TouchPointReleased, "@brief Enum constant Qt::TouchPointReleased") +
    gsi::enum_const ("TouchPointStateMask", Qt::TouchPointStateMask, "@brief Enum constant Qt::TouchPointStateMask") +
    gsi::enum_const ("TouchPointPrimary", Qt::TouchPointPrimary, "@brief Enum constant Qt::TouchPointPrimary"),
  "@qt\n@brief This class represents the Qt::TouchPointState enum");

static gsi::QFlagsClass<Qt::TouchPointState > decl_Qt_TouchPointState_Enums ("Qt_QFlags_TouchPointState",
  "@qt\n@brief This class represents the QFlags<Qt::TouchPointState> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TouchPointState_Enum_in_parent (decl_Qt_TouchPointState_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TouchPointState_Enum_as_child (decl_Qt_TouchPointState_Enum, "TouchPointState");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TouchPointState_Enums_as_child (decl_Qt_TouchPointState_Enums, "QFlags_TouchPointState");

}


//  Implementation of the enum wrapper class for Qt::TransformationMode
namespace qt_gsi
{

static gsi::Enum<Qt::TransformationMode> decl_Qt_TransformationMode_Enum ("Qt_TransformationMode",
    gsi::enum_const ("FastTransformation", Qt::FastTransformation, "@brief Enum constant Qt::FastTransformation") +
    gsi::enum_const ("SmoothTransformation", Qt::SmoothTransformation, "@brief Enum constant Qt::SmoothTransformation"),
  "@qt\n@brief This class represents the Qt::TransformationMode enum");

static gsi::QFlagsClass<Qt::TransformationMode > decl_Qt_TransformationMode_Enums ("Qt_QFlags_TransformationMode",
  "@qt\n@brief This class represents the QFlags<Qt::TransformationMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TransformationMode_Enum_in_parent (decl_Qt_TransformationMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TransformationMode_Enum_as_child (decl_Qt_TransformationMode_Enum, "TransformationMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TransformationMode_Enums_as_child (decl_Qt_TransformationMode_Enums, "QFlags_TransformationMode");

}


//  Implementation of the enum wrapper class for Qt::UIEffect
namespace qt_gsi
{

static gsi::Enum<Qt::UIEffect> decl_Qt_UIEffect_Enum ("Qt_UIEffect",
    gsi::enum_const ("UI_General", Qt::UI_General, "@brief Enum constant Qt::UI_General") +
    gsi::enum_const ("UI_AnimateMenu", Qt::UI_AnimateMenu, "@brief Enum constant Qt::UI_AnimateMenu") +
    gsi::enum_const ("UI_FadeMenu", Qt::UI_FadeMenu, "@brief Enum constant Qt::UI_FadeMenu") +
    gsi::enum_const ("UI_AnimateCombo", Qt::UI_AnimateCombo, "@brief Enum constant Qt::UI_AnimateCombo") +
    gsi::enum_const ("UI_AnimateTooltip", Qt::UI_AnimateTooltip, "@brief Enum constant Qt::UI_AnimateTooltip") +
    gsi::enum_const ("UI_FadeTooltip", Qt::UI_FadeTooltip, "@brief Enum constant Qt::UI_FadeTooltip") +
    gsi::enum_const ("UI_AnimateToolBox", Qt::UI_AnimateToolBox, "@brief Enum constant Qt::UI_AnimateToolBox"),
  "@qt\n@brief This class represents the Qt::UIEffect enum");

static gsi::QFlagsClass<Qt::UIEffect > decl_Qt_UIEffect_Enums ("Qt_QFlags_UIEffect",
  "@qt\n@brief This class represents the QFlags<Qt::UIEffect> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_UIEffect_Enum_in_parent (decl_Qt_UIEffect_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_UIEffect_Enum_as_child (decl_Qt_UIEffect_Enum, "UIEffect");
static gsi::ClassExt<Qt_Namespace> decl_Qt_UIEffect_Enums_as_child (decl_Qt_UIEffect_Enums, "QFlags_UIEffect");

}


//  Implementation of the enum wrapper class for Qt::WhiteSpaceMode
namespace qt_gsi
{

static gsi::Enum<Qt::WhiteSpaceMode> decl_Qt_WhiteSpaceMode_Enum ("Qt_WhiteSpaceMode",
    gsi::enum_const ("WhiteSpaceNormal", Qt::WhiteSpaceNormal, "@brief Enum constant Qt::WhiteSpaceNormal") +
    gsi::enum_const ("WhiteSpacePre", Qt::WhiteSpacePre, "@brief Enum constant Qt::WhiteSpacePre") +
    gsi::enum_const ("WhiteSpaceNoWrap", Qt::WhiteSpaceNoWrap, "@brief Enum constant Qt::WhiteSpaceNoWrap") +
    gsi::enum_const ("WhiteSpaceModeUndefined", Qt::WhiteSpaceModeUndefined, "@brief Enum constant Qt::WhiteSpaceModeUndefined"),
  "@qt\n@brief This class represents the Qt::WhiteSpaceMode enum");

static gsi::QFlagsClass<Qt::WhiteSpaceMode > decl_Qt_WhiteSpaceMode_Enums ("Qt_QFlags_WhiteSpaceMode",
  "@qt\n@brief This class represents the QFlags<Qt::WhiteSpaceMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_WhiteSpaceMode_Enum_in_parent (decl_Qt_WhiteSpaceMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_WhiteSpaceMode_Enum_as_child (decl_Qt_WhiteSpaceMode_Enum, "WhiteSpaceMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_WhiteSpaceMode_Enums_as_child (decl_Qt_WhiteSpaceMode_Enums, "QFlags_WhiteSpaceMode");

}


//  Implementation of the enum wrapper class for Qt::WidgetAttribute
namespace qt_gsi
{

static gsi::Enum<Qt::WidgetAttribute> decl_Qt_WidgetAttribute_Enum ("Qt_WidgetAttribute",
    gsi::enum_const ("WA_Disabled", Qt::WA_Disabled, "@brief Enum constant Qt::WA_Disabled") +
    gsi::enum_const ("WA_UnderMouse", Qt::WA_UnderMouse, "@brief Enum constant Qt::WA_UnderMouse") +
    gsi::enum_const ("WA_MouseTracking", Qt::WA_MouseTracking, "@brief Enum constant Qt::WA_MouseTracking") +
    gsi::enum_const ("WA_ContentsPropagated", Qt::WA_ContentsPropagated, "@brief Enum constant Qt::WA_ContentsPropagated") +
    gsi::enum_const ("WA_OpaquePaintEvent", Qt::WA_OpaquePaintEvent, "@brief Enum constant Qt::WA_OpaquePaintEvent") +
    gsi::enum_const ("WA_NoBackground", Qt::WA_NoBackground, "@brief Enum constant Qt::WA_NoBackground") +
    gsi::enum_const ("WA_StaticContents", Qt::WA_StaticContents, "@brief Enum constant Qt::WA_StaticContents") +
    gsi::enum_const ("WA_LaidOut", Qt::WA_LaidOut, "@brief Enum constant Qt::WA_LaidOut") +
    gsi::enum_const ("WA_PaintOnScreen", Qt::WA_PaintOnScreen, "@brief Enum constant Qt::WA_PaintOnScreen") +
    gsi::enum_const ("WA_NoSystemBackground", Qt::WA_NoSystemBackground, "@brief Enum constant Qt::WA_NoSystemBackground") +
    gsi::enum_const ("WA_UpdatesDisabled", Qt::WA_UpdatesDisabled, "@brief Enum constant Qt::WA_UpdatesDisabled") +
    gsi::enum_const ("WA_Mapped", Qt::WA_Mapped, "@brief Enum constant Qt::WA_Mapped") +
    gsi::enum_const ("WA_MacNoClickThrough", Qt::WA_MacNoClickThrough, "@brief Enum constant Qt::WA_MacNoClickThrough") +
    gsi::enum_const ("WA_PaintOutsidePaintEvent", Qt::WA_PaintOutsidePaintEvent, "@brief Enum constant Qt::WA_PaintOutsidePaintEvent") +
    gsi::enum_const ("WA_InputMethodEnabled", Qt::WA_InputMethodEnabled, "@brief Enum constant Qt::WA_InputMethodEnabled") +
    gsi::enum_const ("WA_WState_Visible", Qt::WA_WState_Visible, "@brief Enum constant Qt::WA_WState_Visible") +
    gsi::enum_const ("WA_WState_Hidden", Qt::WA_WState_Hidden, "@brief Enum constant Qt::WA_WState_Hidden") +
    gsi::enum_const ("WA_ForceDisabled", Qt::WA_ForceDisabled, "@brief Enum constant Qt::WA_ForceDisabled") +
    gsi::enum_const ("WA_KeyCompression", Qt::WA_KeyCompression, "@brief Enum constant Qt::WA_KeyCompression") +
    gsi::enum_const ("WA_PendingMoveEvent", Qt::WA_PendingMoveEvent, "@brief Enum constant Qt::WA_PendingMoveEvent") +
    gsi::enum_const ("WA_PendingResizeEvent", Qt::WA_PendingResizeEvent, "@brief Enum constant Qt::WA_PendingResizeEvent") +
    gsi::enum_const ("WA_SetPalette", Qt::WA_SetPalette, "@brief Enum constant Qt::WA_SetPalette") +
    gsi::enum_const ("WA_SetFont", Qt::WA_SetFont, "@brief Enum constant Qt::WA_SetFont") +
    gsi::enum_const ("WA_SetCursor", Qt::WA_SetCursor, "@brief Enum constant Qt::WA_SetCursor") +
    gsi::enum_const ("WA_NoChildEventsFromChildren", Qt::WA_NoChildEventsFromChildren, "@brief Enum constant Qt::WA_NoChildEventsFromChildren") +
    gsi::enum_const ("WA_WindowModified", Qt::WA_WindowModified, "@brief Enum constant Qt::WA_WindowModified") +
    gsi::enum_const ("WA_Resized", Qt::WA_Resized, "@brief Enum constant Qt::WA_Resized") +
    gsi::enum_const ("WA_Moved", Qt::WA_Moved, "@brief Enum constant Qt::WA_Moved") +
    gsi::enum_const ("WA_PendingUpdate", Qt::WA_PendingUpdate, "@brief Enum constant Qt::WA_PendingUpdate") +
    gsi::enum_const ("WA_InvalidSize", Qt::WA_InvalidSize, "@brief Enum constant Qt::WA_InvalidSize") +
    gsi::enum_const ("WA_MacBrushedMetal", Qt::WA_MacBrushedMetal, "@brief Enum constant Qt::WA_MacBrushedMetal") +
    gsi::enum_const ("WA_MacMetalStyle", Qt::WA_MacMetalStyle, "@brief Enum constant Qt::WA_MacMetalStyle") +
    gsi::enum_const ("WA_CustomWhatsThis", Qt::WA_CustomWhatsThis, "@brief Enum constant Qt::WA_CustomWhatsThis") +
    gsi::enum_const ("WA_LayoutOnEntireRect", Qt::WA_LayoutOnEntireRect, "@brief Enum constant Qt::WA_LayoutOnEntireRect") +
    gsi::enum_const ("WA_OutsideWSRange", Qt::WA_OutsideWSRange, "@brief Enum constant Qt::WA_OutsideWSRange") +
    gsi::enum_const ("WA_GrabbedShortcut", Qt::WA_GrabbedShortcut, "@brief Enum constant Qt::WA_GrabbedShortcut") +
    gsi::enum_const ("WA_TransparentForMouseEvents", Qt::WA_TransparentForMouseEvents, "@brief Enum constant Qt::WA_TransparentForMouseEvents") +
    gsi::enum_const ("WA_PaintUnclipped", Qt::WA_PaintUnclipped, "@brief Enum constant Qt::WA_PaintUnclipped") +
    gsi::enum_const ("WA_SetWindowIcon", Qt::WA_SetWindowIcon, "@brief Enum constant Qt::WA_SetWindowIcon") +
    gsi::enum_const ("WA_NoMouseReplay", Qt::WA_NoMouseReplay, "@brief Enum constant Qt::WA_NoMouseReplay") +
    gsi::enum_const ("WA_DeleteOnClose", Qt::WA_DeleteOnClose, "@brief Enum constant Qt::WA_DeleteOnClose") +
    gsi::enum_const ("WA_RightToLeft", Qt::WA_RightToLeft, "@brief Enum constant Qt::WA_RightToLeft") +
    gsi::enum_const ("WA_SetLayoutDirection", Qt::WA_SetLayoutDirection, "@brief Enum constant Qt::WA_SetLayoutDirection") +
    gsi::enum_const ("WA_NoChildEventsForParent", Qt::WA_NoChildEventsForParent, "@brief Enum constant Qt::WA_NoChildEventsForParent") +
    gsi::enum_const ("WA_ForceUpdatesDisabled", Qt::WA_ForceUpdatesDisabled, "@brief Enum constant Qt::WA_ForceUpdatesDisabled") +
    gsi::enum_const ("WA_WState_Created", Qt::WA_WState_Created, "@brief Enum constant Qt::WA_WState_Created") +
    gsi::enum_const ("WA_WState_CompressKeys", Qt::WA_WState_CompressKeys, "@brief Enum constant Qt::WA_WState_CompressKeys") +
    gsi::enum_const ("WA_WState_InPaintEvent", Qt::WA_WState_InPaintEvent, "@brief Enum constant Qt::WA_WState_InPaintEvent") +
    gsi::enum_const ("WA_WState_Reparented", Qt::WA_WState_Reparented, "@brief Enum constant Qt::WA_WState_Reparented") +
    gsi::enum_const ("WA_WState_ConfigPending", Qt::WA_WState_ConfigPending, "@brief Enum constant Qt::WA_WState_ConfigPending") +
    gsi::enum_const ("WA_WState_Polished", Qt::WA_WState_Polished, "@brief Enum constant Qt::WA_WState_Polished") +
    gsi::enum_const ("WA_WState_DND", Qt::WA_WState_DND, "@brief Enum constant Qt::WA_WState_DND") +
    gsi::enum_const ("WA_WState_OwnSizePolicy", Qt::WA_WState_OwnSizePolicy, "@brief Enum constant Qt::WA_WState_OwnSizePolicy") +
    gsi::enum_const ("WA_WState_ExplicitShowHide", Qt::WA_WState_ExplicitShowHide, "@brief Enum constant Qt::WA_WState_ExplicitShowHide") +
    gsi::enum_const ("WA_ShowModal", Qt::WA_ShowModal, "@brief Enum constant Qt::WA_ShowModal") +
    gsi::enum_const ("WA_MouseNoMask", Qt::WA_MouseNoMask, "@brief Enum constant Qt::WA_MouseNoMask") +
    gsi::enum_const ("WA_GroupLeader", Qt::WA_GroupLeader, "@brief Enum constant Qt::WA_GroupLeader") +
    gsi::enum_const ("WA_NoMousePropagation", Qt::WA_NoMousePropagation, "@brief Enum constant Qt::WA_NoMousePropagation") +
    gsi::enum_const ("WA_Hover", Qt::WA_Hover, "@brief Enum constant Qt::WA_Hover") +
    gsi::enum_const ("WA_InputMethodTransparent", Qt::WA_InputMethodTransparent, "@brief Enum constant Qt::WA_InputMethodTransparent") +
    gsi::enum_const ("WA_QuitOnClose", Qt::WA_QuitOnClose, "@brief Enum constant Qt::WA_QuitOnClose") +
    gsi::enum_const ("WA_KeyboardFocusChange", Qt::WA_KeyboardFocusChange, "@brief Enum constant Qt::WA_KeyboardFocusChange") +
    gsi::enum_const ("WA_AcceptDrops", Qt::WA_AcceptDrops, "@brief Enum constant Qt::WA_AcceptDrops") +
    gsi::enum_const ("WA_DropSiteRegistered", Qt::WA_DropSiteRegistered, "@brief Enum constant Qt::WA_DropSiteRegistered") +
    gsi::enum_const ("WA_ForceAcceptDrops", Qt::WA_ForceAcceptDrops, "@brief Enum constant Qt::WA_ForceAcceptDrops") +
    gsi::enum_const ("WA_WindowPropagation", Qt::WA_WindowPropagation, "@brief Enum constant Qt::WA_WindowPropagation") +
    gsi::enum_const ("WA_NoX11EventCompression", Qt::WA_NoX11EventCompression, "@brief Enum constant Qt::WA_NoX11EventCompression") +
    gsi::enum_const ("WA_TintedBackground", Qt::WA_TintedBackground, "@brief Enum constant Qt::WA_TintedBackground") +
    gsi::enum_const ("WA_X11OpenGLOverlay", Qt::WA_X11OpenGLOverlay, "@brief Enum constant Qt::WA_X11OpenGLOverlay") +
    gsi::enum_const ("WA_AlwaysShowToolTips", Qt::WA_AlwaysShowToolTips, "@brief Enum constant Qt::WA_AlwaysShowToolTips") +
    gsi::enum_const ("WA_MacOpaqueSizeGrip", Qt::WA_MacOpaqueSizeGrip, "@brief Enum constant Qt::WA_MacOpaqueSizeGrip") +
    gsi::enum_const ("WA_SetStyle", Qt::WA_SetStyle, "@brief Enum constant Qt::WA_SetStyle") +
    gsi::enum_const ("WA_SetLocale", Qt::WA_SetLocale, "@brief Enum constant Qt::WA_SetLocale") +
    gsi::enum_const ("WA_MacShowFocusRect", Qt::WA_MacShowFocusRect, "@brief Enum constant Qt::WA_MacShowFocusRect") +
    gsi::enum_const ("WA_MacNormalSize", Qt::WA_MacNormalSize, "@brief Enum constant Qt::WA_MacNormalSize") +
    gsi::enum_const ("WA_MacSmallSize", Qt::WA_MacSmallSize, "@brief Enum constant Qt::WA_MacSmallSize") +
    gsi::enum_const ("WA_MacMiniSize", Qt::WA_MacMiniSize, "@brief Enum constant Qt::WA_MacMiniSize") +
    gsi::enum_const ("WA_LayoutUsesWidgetRect", Qt::WA_LayoutUsesWidgetRect, "@brief Enum constant Qt::WA_LayoutUsesWidgetRect") +
    gsi::enum_const ("WA_StyledBackground", Qt::WA_StyledBackground, "@brief Enum constant Qt::WA_StyledBackground") +
    gsi::enum_const ("WA_MSWindowsUseDirect3D", Qt::WA_MSWindowsUseDirect3D, "@brief Enum constant Qt::WA_MSWindowsUseDirect3D") +
    gsi::enum_const ("WA_CanHostQMdiSubWindowTitleBar", Qt::WA_CanHostQMdiSubWindowTitleBar, "@brief Enum constant Qt::WA_CanHostQMdiSubWindowTitleBar") +
    gsi::enum_const ("WA_MacAlwaysShowToolWindow", Qt::WA_MacAlwaysShowToolWindow, "@brief Enum constant Qt::WA_MacAlwaysShowToolWindow") +
    gsi::enum_const ("WA_StyleSheet", Qt::WA_StyleSheet, "@brief Enum constant Qt::WA_StyleSheet") +
    gsi::enum_const ("WA_ShowWithoutActivating", Qt::WA_ShowWithoutActivating, "@brief Enum constant Qt::WA_ShowWithoutActivating") +
    gsi::enum_const ("WA_X11BypassTransientForHint", Qt::WA_X11BypassTransientForHint, "@brief Enum constant Qt::WA_X11BypassTransientForHint") +
    gsi::enum_const ("WA_NativeWindow", Qt::WA_NativeWindow, "@brief Enum constant Qt::WA_NativeWindow") +
    gsi::enum_const ("WA_DontCreateNativeAncestors", Qt::WA_DontCreateNativeAncestors, "@brief Enum constant Qt::WA_DontCreateNativeAncestors") +
    gsi::enum_const ("WA_MacVariableSize", Qt::WA_MacVariableSize, "@brief Enum constant Qt::WA_MacVariableSize") +
    gsi::enum_const ("WA_DontShowOnScreen", Qt::WA_DontShowOnScreen, "@brief Enum constant Qt::WA_DontShowOnScreen") +
    gsi::enum_const ("WA_X11NetWmWindowTypeDesktop", Qt::WA_X11NetWmWindowTypeDesktop, "@brief Enum constant Qt::WA_X11NetWmWindowTypeDesktop") +
    gsi::enum_const ("WA_X11NetWmWindowTypeDock", Qt::WA_X11NetWmWindowTypeDock, "@brief Enum constant Qt::WA_X11NetWmWindowTypeDock") +
    gsi::enum_const ("WA_X11NetWmWindowTypeToolBar", Qt::WA_X11NetWmWindowTypeToolBar, "@brief Enum constant Qt::WA_X11NetWmWindowTypeToolBar") +
    gsi::enum_const ("WA_X11NetWmWindowTypeMenu", Qt::WA_X11NetWmWindowTypeMenu, "@brief Enum constant Qt::WA_X11NetWmWindowTypeMenu") +
    gsi::enum_const ("WA_X11NetWmWindowTypeUtility", Qt::WA_X11NetWmWindowTypeUtility, "@brief Enum constant Qt::WA_X11NetWmWindowTypeUtility") +
    gsi::enum_const ("WA_X11NetWmWindowTypeSplash", Qt::WA_X11NetWmWindowTypeSplash, "@brief Enum constant Qt::WA_X11NetWmWindowTypeSplash") +
    gsi::enum_const ("WA_X11NetWmWindowTypeDialog", Qt::WA_X11NetWmWindowTypeDialog, "@brief Enum constant Qt::WA_X11NetWmWindowTypeDialog") +
    gsi::enum_const ("WA_X11NetWmWindowTypeDropDownMenu", Qt::WA_X11NetWmWindowTypeDropDownMenu, "@brief Enum constant Qt::WA_X11NetWmWindowTypeDropDownMenu") +
    gsi::enum_const ("WA_X11NetWmWindowTypePopupMenu", Qt::WA_X11NetWmWindowTypePopupMenu, "@brief Enum constant Qt::WA_X11NetWmWindowTypePopupMenu") +
    gsi::enum_const ("WA_X11NetWmWindowTypeToolTip", Qt::WA_X11NetWmWindowTypeToolTip, "@brief Enum constant Qt::WA_X11NetWmWindowTypeToolTip") +
    gsi::enum_const ("WA_X11NetWmWindowTypeNotification", Qt::WA_X11NetWmWindowTypeNotification, "@brief Enum constant Qt::WA_X11NetWmWindowTypeNotification") +
    gsi::enum_const ("WA_X11NetWmWindowTypeCombo", Qt::WA_X11NetWmWindowTypeCombo, "@brief Enum constant Qt::WA_X11NetWmWindowTypeCombo") +
    gsi::enum_const ("WA_X11NetWmWindowTypeDND", Qt::WA_X11NetWmWindowTypeDND, "@brief Enum constant Qt::WA_X11NetWmWindowTypeDND") +
    gsi::enum_const ("WA_MacFrameworkScaled", Qt::WA_MacFrameworkScaled, "@brief Enum constant Qt::WA_MacFrameworkScaled") +
    gsi::enum_const ("WA_SetWindowModality", Qt::WA_SetWindowModality, "@brief Enum constant Qt::WA_SetWindowModality") +
    gsi::enum_const ("WA_WState_WindowOpacitySet", Qt::WA_WState_WindowOpacitySet, "@brief Enum constant Qt::WA_WState_WindowOpacitySet") +
    gsi::enum_const ("WA_TranslucentBackground", Qt::WA_TranslucentBackground, "@brief Enum constant Qt::WA_TranslucentBackground") +
    gsi::enum_const ("WA_AcceptTouchEvents", Qt::WA_AcceptTouchEvents, "@brief Enum constant Qt::WA_AcceptTouchEvents") +
    gsi::enum_const ("WA_WState_AcceptedTouchBeginEvent", Qt::WA_WState_AcceptedTouchBeginEvent, "@brief Enum constant Qt::WA_WState_AcceptedTouchBeginEvent") +
    gsi::enum_const ("WA_TouchPadAcceptSingleTouchEvents", Qt::WA_TouchPadAcceptSingleTouchEvents, "@brief Enum constant Qt::WA_TouchPadAcceptSingleTouchEvents") +
    gsi::enum_const ("WA_MergeSoftkeys", Qt::WA_MergeSoftkeys, "@brief Enum constant Qt::WA_MergeSoftkeys") +
    gsi::enum_const ("WA_MergeSoftkeysRecursively", Qt::WA_MergeSoftkeysRecursively, "@brief Enum constant Qt::WA_MergeSoftkeysRecursively") +
    gsi::enum_const ("WA_AttributeCount", Qt::WA_AttributeCount, "@brief Enum constant Qt::WA_AttributeCount"),
  "@qt\n@brief This class represents the Qt::WidgetAttribute enum");

static gsi::QFlagsClass<Qt::WidgetAttribute > decl_Qt_WidgetAttribute_Enums ("Qt_QFlags_WidgetAttribute",
  "@qt\n@brief This class represents the QFlags<Qt::WidgetAttribute> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_WidgetAttribute_Enum_in_parent (decl_Qt_WidgetAttribute_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_WidgetAttribute_Enum_as_child (decl_Qt_WidgetAttribute_Enum, "WidgetAttribute");
static gsi::ClassExt<Qt_Namespace> decl_Qt_WidgetAttribute_Enums_as_child (decl_Qt_WidgetAttribute_Enums, "QFlags_WidgetAttribute");

}


//  Implementation of the enum wrapper class for Qt::WindowFrameSection
namespace qt_gsi
{

static gsi::Enum<Qt::WindowFrameSection> decl_Qt_WindowFrameSection_Enum ("Qt_WindowFrameSection",
    gsi::enum_const ("NoSection", Qt::NoSection, "@brief Enum constant Qt::NoSection") +
    gsi::enum_const ("LeftSection", Qt::LeftSection, "@brief Enum constant Qt::LeftSection") +
    gsi::enum_const ("TopLeftSection", Qt::TopLeftSection, "@brief Enum constant Qt::TopLeftSection") +
    gsi::enum_const ("TopSection", Qt::TopSection, "@brief Enum constant Qt::TopSection") +
    gsi::enum_const ("TopRightSection", Qt::TopRightSection, "@brief Enum constant Qt::TopRightSection") +
    gsi::enum_const ("RightSection", Qt::RightSection, "@brief Enum constant Qt::RightSection") +
    gsi::enum_const ("BottomRightSection", Qt::BottomRightSection, "@brief Enum constant Qt::BottomRightSection") +
    gsi::enum_const ("BottomSection", Qt::BottomSection, "@brief Enum constant Qt::BottomSection") +
    gsi::enum_const ("BottomLeftSection", Qt::BottomLeftSection, "@brief Enum constant Qt::BottomLeftSection") +
    gsi::enum_const ("TitleBarArea", Qt::TitleBarArea, "@brief Enum constant Qt::TitleBarArea"),
  "@qt\n@brief This class represents the Qt::WindowFrameSection enum");

static gsi::QFlagsClass<Qt::WindowFrameSection > decl_Qt_WindowFrameSection_Enums ("Qt_QFlags_WindowFrameSection",
  "@qt\n@brief This class represents the QFlags<Qt::WindowFrameSection> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_WindowFrameSection_Enum_in_parent (decl_Qt_WindowFrameSection_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_WindowFrameSection_Enum_as_child (decl_Qt_WindowFrameSection_Enum, "WindowFrameSection");
static gsi::ClassExt<Qt_Namespace> decl_Qt_WindowFrameSection_Enums_as_child (decl_Qt_WindowFrameSection_Enums, "QFlags_WindowFrameSection");

}


//  Implementation of the enum wrapper class for Qt::WindowModality
namespace qt_gsi
{

static gsi::Enum<Qt::WindowModality> decl_Qt_WindowModality_Enum ("Qt_WindowModality",
    gsi::enum_const ("NonModal", Qt::NonModal, "@brief Enum constant Qt::NonModal") +
    gsi::enum_const ("WindowModal", Qt::WindowModal, "@brief Enum constant Qt::WindowModal") +
    gsi::enum_const ("ApplicationModal", Qt::ApplicationModal, "@brief Enum constant Qt::ApplicationModal"),
  "@qt\n@brief This class represents the Qt::WindowModality enum");

static gsi::QFlagsClass<Qt::WindowModality > decl_Qt_WindowModality_Enums ("Qt_QFlags_WindowModality",
  "@qt\n@brief This class represents the QFlags<Qt::WindowModality> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_WindowModality_Enum_in_parent (decl_Qt_WindowModality_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_WindowModality_Enum_as_child (decl_Qt_WindowModality_Enum, "WindowModality");
static gsi::ClassExt<Qt_Namespace> decl_Qt_WindowModality_Enums_as_child (decl_Qt_WindowModality_Enums, "QFlags_WindowModality");

}


//  Implementation of the enum wrapper class for Qt::WindowState
namespace qt_gsi
{

static gsi::Enum<Qt::WindowState> decl_Qt_WindowState_Enum ("Qt_WindowState",
    gsi::enum_const ("WindowNoState", Qt::WindowNoState, "@brief Enum constant Qt::WindowNoState") +
    gsi::enum_const ("WindowMinimized", Qt::WindowMinimized, "@brief Enum constant Qt::WindowMinimized") +
    gsi::enum_const ("WindowMaximized", Qt::WindowMaximized, "@brief Enum constant Qt::WindowMaximized") +
    gsi::enum_const ("WindowFullScreen", Qt::WindowFullScreen, "@brief Enum constant Qt::WindowFullScreen") +
    gsi::enum_const ("WindowActive", Qt::WindowActive, "@brief Enum constant Qt::WindowActive"),
  "@qt\n@brief This class represents the Qt::WindowState enum");

static gsi::QFlagsClass<Qt::WindowState > decl_Qt_WindowState_Enums ("Qt_QFlags_WindowState",
  "@qt\n@brief This class represents the QFlags<Qt::WindowState> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_WindowState_Enum_in_parent (decl_Qt_WindowState_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_WindowState_Enum_as_child (decl_Qt_WindowState_Enum, "WindowState");
static gsi::ClassExt<Qt_Namespace> decl_Qt_WindowState_Enums_as_child (decl_Qt_WindowState_Enums, "QFlags_WindowState");

}


//  Implementation of the enum wrapper class for Qt::WindowType
namespace qt_gsi
{

static gsi::Enum<Qt::WindowType> decl_Qt_WindowType_Enum ("Qt_WindowType",
    gsi::enum_const ("Widget", Qt::Widget, "@brief Enum constant Qt::Widget") +
    gsi::enum_const ("Window", Qt::Window, "@brief Enum constant Qt::Window") +
    gsi::enum_const ("Dialog", Qt::Dialog, "@brief Enum constant Qt::Dialog") +
    gsi::enum_const ("Sheet", Qt::Sheet, "@brief Enum constant Qt::Sheet") +
    gsi::enum_const ("Drawer", Qt::Drawer, "@brief Enum constant Qt::Drawer") +
    gsi::enum_const ("Popup", Qt::Popup, "@brief Enum constant Qt::Popup") +
    gsi::enum_const ("Tool", Qt::Tool, "@brief Enum constant Qt::Tool") +
    gsi::enum_const ("ToolTip", Qt::ToolTip, "@brief Enum constant Qt::ToolTip") +
    gsi::enum_const ("SplashScreen", Qt::SplashScreen, "@brief Enum constant Qt::SplashScreen") +
    gsi::enum_const ("Desktop", Qt::Desktop, "@brief Enum constant Qt::Desktop") +
    gsi::enum_const ("SubWindow", Qt::SubWindow, "@brief Enum constant Qt::SubWindow") +
    gsi::enum_const ("WindowType_Mask", Qt::WindowType_Mask, "@brief Enum constant Qt::WindowType_Mask") +
    gsi::enum_const ("MSWindowsFixedSizeDialogHint", Qt::MSWindowsFixedSizeDialogHint, "@brief Enum constant Qt::MSWindowsFixedSizeDialogHint") +
    gsi::enum_const ("MSWindowsOwnDC", Qt::MSWindowsOwnDC, "@brief Enum constant Qt::MSWindowsOwnDC") +
    gsi::enum_const ("X11BypassWindowManagerHint", Qt::X11BypassWindowManagerHint, "@brief Enum constant Qt::X11BypassWindowManagerHint") +
    gsi::enum_const ("FramelessWindowHint", Qt::FramelessWindowHint, "@brief Enum constant Qt::FramelessWindowHint") +
    gsi::enum_const ("WindowTitleHint", Qt::WindowTitleHint, "@brief Enum constant Qt::WindowTitleHint") +
    gsi::enum_const ("WindowSystemMenuHint", Qt::WindowSystemMenuHint, "@brief Enum constant Qt::WindowSystemMenuHint") +
    gsi::enum_const ("WindowMinimizeButtonHint", Qt::WindowMinimizeButtonHint, "@brief Enum constant Qt::WindowMinimizeButtonHint") +
    gsi::enum_const ("WindowMaximizeButtonHint", Qt::WindowMaximizeButtonHint, "@brief Enum constant Qt::WindowMaximizeButtonHint") +
    gsi::enum_const ("WindowMinMaxButtonsHint", Qt::WindowMinMaxButtonsHint, "@brief Enum constant Qt::WindowMinMaxButtonsHint") +
    gsi::enum_const ("WindowContextHelpButtonHint", Qt::WindowContextHelpButtonHint, "@brief Enum constant Qt::WindowContextHelpButtonHint") +
    gsi::enum_const ("WindowShadeButtonHint", Qt::WindowShadeButtonHint, "@brief Enum constant Qt::WindowShadeButtonHint") +
    gsi::enum_const ("WindowStaysOnTopHint", Qt::WindowStaysOnTopHint, "@brief Enum constant Qt::WindowStaysOnTopHint") +
    gsi::enum_const ("CustomizeWindowHint", Qt::CustomizeWindowHint, "@brief Enum constant Qt::CustomizeWindowHint") +
    gsi::enum_const ("WindowStaysOnBottomHint", Qt::WindowStaysOnBottomHint, "@brief Enum constant Qt::WindowStaysOnBottomHint") +
    gsi::enum_const ("WindowCloseButtonHint", Qt::WindowCloseButtonHint, "@brief Enum constant Qt::WindowCloseButtonHint") +
    gsi::enum_const ("MacWindowToolBarButtonHint", Qt::MacWindowToolBarButtonHint, "@brief Enum constant Qt::MacWindowToolBarButtonHint") +
    gsi::enum_const ("BypassGraphicsProxyWidget", Qt::BypassGraphicsProxyWidget, "@brief Enum constant Qt::BypassGraphicsProxyWidget") +
    gsi::enum_const ("WindowOkButtonHint", Qt::WindowOkButtonHint, "@brief Enum constant Qt::WindowOkButtonHint") +
    gsi::enum_const ("WindowCancelButtonHint", Qt::WindowCancelButtonHint, "@brief Enum constant Qt::WindowCancelButtonHint"),
  "@qt\n@brief This class represents the Qt::WindowType enum");

static gsi::QFlagsClass<Qt::WindowType > decl_Qt_WindowType_Enums ("Qt_QFlags_WindowType",
  "@qt\n@brief This class represents the QFlags<Qt::WindowType> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_WindowType_Enum_in_parent (decl_Qt_WindowType_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_WindowType_Enum_as_child (decl_Qt_WindowType_Enum, "WindowType");
static gsi::ClassExt<Qt_Namespace> decl_Qt_WindowType_Enums_as_child (decl_Qt_WindowType_Enums, "QFlags_WindowType");

}

