/**
*  @file gsiDeclQDomText.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QDomText>
#include <QDomAttr>
#include <QDomCDATASection>
#include <QDomCharacterData>
#include <QDomComment>
#include <QDomDocument>
#include <QDomDocumentFragment>
#include <QDomDocumentType>
#include <QDomElement>
#include <QDomEntity>
#include <QDomEntityReference>
#include <QDomNamedNodeMap>
#include <QDomNode>
#include <QDomNodeList>
#include <QDomNotation>
#include <QDomProcessingInstruction>
#include <QTextStream>
#include "gsiQt.h"
#include "gsiQtCommon.h"
#include "gsiDeclQtTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QDomText

//  Constructor QDomText::QDomText()


static void _init_ctor_QDomText_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QDomText> ();
}

static void _call_ctor_QDomText_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QDomText *> (new QDomText ());
}


//  Constructor QDomText::QDomText(const QDomText &x)


static void _init_ctor_QDomText_2103 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("x");
  decl->add_arg<const QDomText & > (argspec_0);
  decl->set_return_new<QDomText> ();
}

static void _call_ctor_QDomText_2103 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QDomText &arg1 = args.read<const QDomText & > (heap);
  ret.write<QDomText *> (new QDomText (arg1));
}


// () const


static void _init_f_nodeType_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QDomNode::NodeType>::target_type > ();
}

static void _call_f_nodeType_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QDomNode::NodeType>::target_type > ((qt_gsi::Converter<QDomNode::NodeType>::target_type)qt_gsi::CppToQtAdaptor<QDomNode::NodeType>(((QDomText *)cls)->nodeType ()));
}


// (const QDomText &)


static void _init_f_operator_eq__2103 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QDomText & > (argspec_0);
  decl->set_return<QDomText & > ();
}

static void _call_f_operator_eq__2103 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QDomText &arg1 = args.read<const QDomText & > (heap);
  ret.write<QDomText & > ((QDomText &)((QDomText *)cls)->operator= (arg1));
}


// QDomText QDomText::splitText(int offset)


static void _init_f_splitText_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("offset");
  decl->add_arg<int > (argspec_0);
  decl->set_return<QDomText > ();
}

static void _call_f_splitText_767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = args.read<int > (heap);
  ret.write<QDomText > ((QDomText)((QDomText *)cls)->splitText (arg1));
}



namespace gsi
{

static gsi::Methods methods_QDomText () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDomText::QDomText()\nThis method creates an object of class QDomText.", &_init_ctor_QDomText_0, &_call_ctor_QDomText_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDomText::QDomText(const QDomText &x)\nThis method creates an object of class QDomText.", &_init_ctor_QDomText_2103, &_call_ctor_QDomText_2103);
  methods += new qt_gsi::GenericMethod ("nodeType", "@brief Method () const\n", true, &_init_f_nodeType_c0, &_call_f_nodeType_c0);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method (const QDomText &)\n", false, &_init_f_operator_eq__2103, &_call_f_operator_eq__2103);
  methods += new qt_gsi::GenericMethod ("splitText", "@brief Method QDomText QDomText::splitText(int offset)\n", false, &_init_f_splitText_767, &_call_f_splitText_767);
  return methods;
}

gsi::Class<QDomCharacterData> &qtdecl_QDomCharacterData ();

gsi::Class<QDomText> decl_QDomText (qtdecl_QDomCharacterData (), "QDomText",
  methods_QDomText (),
  "@qt\n@brief Binding of QDomText");


GSIQT_PUBLIC gsi::Class<QDomText> &qtdecl_QDomText () { return decl_QDomText; }

}

